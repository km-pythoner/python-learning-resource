
=====================================
创作你的第一个 Django app, part 2
=====================================

本教程紧接 :doc:`Tutorial 1 </intro/tutorial01>` 之后。
我们将设置数据库，创建第一个model，并且对Django自动生成admin站点做简短介绍。

数据库设置
==============

现在，打开 :file:`mysite/settings.py`。它是一个表示Django设置的带模块级变量的普通Python模块。

缺省情况下的配置使用SQLite数据库。如果你对数据库不熟悉，或者只是想尝试一下Django，
它就是最省力的选择。SQLite包含在Python中，因此不需要再安装其它代码库以支持数据库。
然而，当启动一个真实项目，你需要一个伸缩性更好的数据库比如PostgreSQL，用以避免数据库切换的困扰。

如果希望采用非SQLite数据库，安装合适的 :ref:`database
bindings <database-installation>` 并修改
:setting:`DATABASES` ``'default'`` 配置项中下面的键以适配数据库连接：

* :setting:`ENGINE <DATABASE-ENGINE>` -- Either
  ``'django.db.backends.sqlite3'``,
  ``'django.db.backends.postgresql'``,
  ``'django.db.backends.mysql'``, or
  ``'django.db.backends.oracle'``. Other backends are :ref:`also available
  <third-party-notes>`.

* :setting:`NAME` -- 数据库名称。如果使用SQLite，数据库将会是你电脑中的一个文件；
  那样的话， :setting:`NAME`应该是全路径的绝对地址，包括文件名称。
  缺省值 ``os.path.join(BASE_DIR, 'db.sqlite3')``的设置将文件存储在工程路径下。

如果不使用SQLite作为项目的数据库，需要添加诸如：
:setting:`USER`, :setting:`PASSWORD`, and :setting:`HOST`的附加设置。
更多详情见 :setting:`DATABASES`.

.. admonition:: For databases other than SQLite

    If you're using a database besides SQLite, make sure you've created a
    database by this point. Do that with "``CREATE DATABASE database_name;``"
    within your database's interactive prompt.

    Also make sure that the database user provided in :file:`mysite/settings.py`
    has "create database" privileges. This allows automatic creation of a
    :ref:`test database <the-test-database>` which will be needed in a later
    tutorial.

    If you're using SQLite, you don't need to create anything beforehand - the
    database file will be created automatically when it is needed.

当编辑 :file:`mysite/settings.py`时，设置 :setting:`TIME_ZONE` 为你的时区。

同时，注意文件顶部的 :setting:`INSTALLED_APPS`设置。它放置了该Django实例下的
所有Django应用名。Apps可以用在多个工程中，可以打包并分发它们供他人使用。

缺省情况下， :setting:`INSTALLED_APPS` 包含了如下的apps， 它们全部来自Django：

* :mod:`django.contrib.admin` -- 管理站点。很快就会用到它。

* :mod:`django.contrib.auth` -- 认证系统

* :mod:`django.contrib.contenttypes` -- 内容类型框架

* :mod:`django.contrib.sessions` -- session框架

* :mod:`django.contrib.messages` -- 消息框架

* :mod:`django.contrib.staticfiles` -- 管理静态类型文件框架

缺省情况下已经包含了这些应用，以便于应对多数场景。

这些应用中的一部分使用了至少一张数据库表，因此我们需要在数据库中创建数据库表。
为了达到目的，运行下面的命令：

.. code-block:: console

    $ python manage.py migrate

:djadmin:`migrate` 命令按照 :setting:`INSTALLED_APPS` 设置
并根据:file:`mysite/settings.py` 中的配置创建和更改必要的数据库表（之后会讲到）。
运行后能看到该命令运行并起效的信息。
如果感兴趣，运行你数据库的命令行客户端并输入 ``\dt`` (PostgreSQL), ``SHOW TABLES;`` (MySQL), ``.schema``
(SQLite), or ``SELECT TABLE_NAME FROM USER_TABLES;`` (Oracle) 以显示Django'创建的数据库表。

.. admonition:: For the minimalists

    Like we said above, the default applications are included for the common
    case, but not everybody needs them. If you don't need any or all of them,
    feel free to comment-out or delete the appropriate line(s) from
    :setting:`INSTALLED_APPS` before running :djadmin:`migrate`. The
    :djadmin:`migrate` command will only run migrations for apps in
    :setting:`INSTALLED_APPS`.

.. _creating-models:

创建模型
===============

现在我们将定义模型 -- 实质上就是数据库结构，和附加的源数据。

.. admonition:: Philosophy

   A model is the single, definitive source of truth about your data. It contains
   the essential fields and behaviors of the data you're storing. Django follows
   the :ref:`DRY Principle <dry>`. The goal is to define your data model in one
   place and automatically derive things from it.

   This includes the migrations - unlike in Ruby On Rails, for example, migrations
   are entirely derived from your models file, and are essentially just a
   history that Django can roll through to update your database schema to
   match your current models.

在我们简单的poll app中，将创建两个模型： ``Question`` 和 ``Choice``。
``Question`` 拥有question 和 publication date两个字段。 ``Choice`` 拥有两个字段：
选择的文本和对应的投票。 每一个``Choice`` 关联一个``Question``。

这些概念使用简单的Python类表达。如下编辑
:file:`polls/models.py` 文件：

.. snippet::
    :filename: polls/models.py

    from django.db import models


    class Question(models.Model):
        question_text = models.CharField(max_length=200)
        pub_date = models.DateTimeField('date published')


    class Choice(models.Model):
        question = models.ForeignKey(Question, on_delete=models.CASCADE)
        choice_text = models.CharField(max_length=200)
        votes = models.IntegerField(default=0)

代码直来直去。每一个模型都通过继承类:class:`django.db.models.Model`来表示。
 每个模型都有一些类变量，它们各自代表了数据库的一个字段。

每一个字段都被表示为一个:class:`~django.db.models.Field`
类 -- 比如, :class:`~django.db.models.CharField` 代表字符型，
:class:`~django.db.models.DateTimeField` 代表DateTime型。
这（就能）告诉Django各字段分别是什么类型。

每一个 :class:`~django.db.models.Field` 实例的名称(e.g.
``question_text`` or ``pub_date``) 就是域的名称，使用机器友好的格式。
你将在Python代码中使用这个值，并且数据库中也使用它作为列名。

你可以通过为:class:`~django.db.models.Field` 类在
（构造函数的）第一位置指定可选的别名参数以便人类阅读。
这在Django中一些涉及内省的地方使用过，而且它也可以作为文档来使用。
如果这个域（参数）没有被提供，Django将使用机器可读的名称。
在本文的例子中，我们已经切仅为``Question.pub_date``定义了一个人类可读的名称。
对于其他的模型中的域，它们的机器可读的名称满足作为人类可读名称的作用。


一些 :class:`~django.db.models.Field` 类有必填参数。
比如:class:`~django.db.models.CharField`, 它需要给出属性
:attr:`~django.db.models.CharField.max_length`。它不仅仅用在数据库的格式中，
也用在字段验证中，正如我们将要看到的那样。

:class:`~django.db.models.Field`类同时也能拥有各种各样的可选参数：
在这个例子中，我们设置了``votes``的:attr:`~django.db.models.Field.default` 值为0。

最后，注意我们已经定义了一种关系，使用
:class:`~django.db.models.ForeignKey`。
这告诉Django每一个``Choice``对应一个单独的``Question``类。
Django支持所有数据库表对应关系：many-to-one, many-to-many, 以及one-to-one。

激活模型
=================

上面的少数代码给了Django不少的信息。使用他们，Django可以做到：

* 构造数据库表结构 (``CREATE TABLE`` statements)。
* 构造基于Python的数据库访问API以访问：``Question``和``Choice`` 对象。

但首先我们得先告诉工程``polls`` app安装在哪里。

.. admonition:: 哲学

    Django apps是“插件化的”：你可以在不同的工程中使用同一个app，而且可以分发app们，
    因为它们不必绑定到给定的Django安装。

为了将这个app包含到你的工程中，我们需要将配置类的引用加入到:setting:`INSTALLED_APPS` 设置中。
``PollsConfig`` 类在:file:`polls/apps.py` 文件中，所以它的点号路径就是：
``'polls.apps.PollsConfig'``。 编辑 :file:`mysite/settings.py` 文件并将点号路径加入到
:setting:`INSTALLED_APPS` 设置中。就像这样：


.. snippet::
    :filename: mysite/settings.py

    INSTALLED_APPS = [
        'polls.apps.PollsConfig',
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
    ]

现在Django知道需要包含``polls`` app了，让我们运行另外一个命令：

.. code-block:: console

    $ python manage.py makemigrations polls

你将看到类似于下面的内容：

.. code-block:: text

    Migrations for 'polls':
      polls/migrations/0001_initial.py:
        - Create model Choice
        - Create model Question
        - Add field question to choice

通过运行``makemigrations``命令，等于是告诉Django你的模型产生了变化（本例中是新建了两张表）
且你希望这些变化通过*migration*保存。

Migrations are how Django stores changes to your models (and thus your
database schema) - they're just files on disk. You can read the migration
for your new model if you like; it's the file
``polls/migrations/0001_initial.py``. Don't worry, you're not expected to read
them every time Django makes one, but they're designed to be human-editable
in case you want to manually tweak how Django changes things.

There's a command that will run the migrations for you and manage your database
schema automatically - that's called :djadmin:`migrate`, and we'll come to it in a
moment - but first, let's see what SQL that migration would run. The
:djadmin:`sqlmigrate` command takes migration names and returns their SQL:

.. code-block:: console

    $ python manage.py sqlmigrate polls 0001

You should see something similar to the following (we've reformatted it for
readability):

.. code-block:: sql

    BEGIN;
    --
    -- Create model Choice
    --
    CREATE TABLE "polls_choice" (
        "id" serial NOT NULL PRIMARY KEY,
        "choice_text" varchar(200) NOT NULL,
        "votes" integer NOT NULL
    );
    --
    -- Create model Question
    --
    CREATE TABLE "polls_question" (
        "id" serial NOT NULL PRIMARY KEY,
        "question_text" varchar(200) NOT NULL,
        "pub_date" timestamp with time zone NOT NULL
    );
    --
    -- Add field question to choice
    --
    ALTER TABLE "polls_choice" ADD COLUMN "question_id" integer NOT NULL;
    ALTER TABLE "polls_choice" ALTER COLUMN "question_id" DROP DEFAULT;
    CREATE INDEX "polls_choice_7aa0f6ee" ON "polls_choice" ("question_id");
    ALTER TABLE "polls_choice"
      ADD CONSTRAINT "polls_choice_question_id_246c99a640fbbd72_fk_polls_question_id"
        FOREIGN KEY ("question_id")
        REFERENCES "polls_question" ("id")
        DEFERRABLE INITIALLY DEFERRED;

    COMMIT;

Note the following:

* The exact output will vary depending on the database you are using. The
  example above is generated for PostgreSQL.

* Table names are automatically generated by combining the name of the app
  (``polls``) and the lowercase name of the model -- ``question`` and
  ``choice``. (You can override this behavior.)

* Primary keys (IDs) are added automatically. (You can override this, too.)

* By convention, Django appends ``"_id"`` to the foreign key field name.
  (Yes, you can override this, as well.)

* The foreign key relationship is made explicit by a ``FOREIGN KEY``
  constraint. Don't worry about the ``DEFERRABLE`` parts; that's just telling
  PostgreSQL to not enforce the foreign key until the end of the transaction.

* It's tailored to the database you're using, so database-specific field types
  such as ``auto_increment`` (MySQL), ``serial`` (PostgreSQL), or ``integer
  primary key autoincrement`` (SQLite) are handled for you automatically. Same
  goes for the quoting of field names -- e.g., using double quotes or
  single quotes.

* The :djadmin:`sqlmigrate` command doesn't actually run the migration on your
  database - it just prints it to the screen so that you can see what SQL
  Django thinks is required. It's useful for checking what Django is going to
  do or if you have database administrators who require SQL scripts for
  changes.

If you're interested, you can also run
:djadmin:`python manage.py check <check>`; this checks for any problems in
your project without making migrations or touching the database.

Now, run :djadmin:`migrate` again to create those model tables in your database:

.. code-block:: console

    $ python manage.py migrate
    Operations to perform:
      Apply all migrations: admin, auth, contenttypes, polls, sessions
    Running migrations:
      Rendering model states... DONE
      Applying polls.0001_initial... OK

The :djadmin:`migrate` command takes all the migrations that haven't been
applied (Django tracks which ones are applied using a special table in your
database called ``django_migrations``) and runs them against your database -
essentially, synchronizing the changes you made to your models with the schema
in the database.

Migrations are very powerful and let you change your models over time, as you
develop your project, without the need to delete your database or tables and
make new ones - it specializes in upgrading your database live, without
losing data. We'll cover them in more depth in a later part of the tutorial,
but for now, remember the three-step guide to making model changes:

* Change your models (in ``models.py``).
* Run :djadmin:`python manage.py makemigrations <makemigrations>` to create
  migrations for those changes
* Run :djadmin:`python manage.py migrate <migrate>` to apply those changes to
  the database.

The reason that there are separate commands to make and apply migrations is
because you'll commit migrations to your version control system and ship them
with your app; they not only make your development easier, they're also
useable by other developers and in production.

Read the :doc:`django-admin documentation </ref/django-admin>` for full
information on what the ``manage.py`` utility can do.

Playing with the API
====================

Now, let's hop into the interactive Python shell and play around with the free
API Django gives you. To invoke the Python shell, use this command:

.. code-block:: console

    $ python manage.py shell

We're using this instead of simply typing "python", because :file:`manage.py`
sets the ``DJANGO_SETTINGS_MODULE`` environment variable, which gives Django
the Python import path to your :file:`mysite/settings.py` file.

.. admonition:: Bypassing manage.py

    If you'd rather not use :file:`manage.py`, no problem. Just set the
    :envvar:`DJANGO_SETTINGS_MODULE` environment variable to
    ``mysite.settings``, start a plain Python shell, and set up Django:

    .. code-block:: pycon

        >>> import django
        >>> django.setup()

    If this raises an :exc:`AttributeError`, you're probably using
    a version of Django that doesn't match this tutorial version. You'll want
    to either switch to the older tutorial or the newer Django version.

    You must run ``python`` from the same directory :file:`manage.py` is in,
    or ensure that directory is on the Python path, so that ``import mysite``
    works.

    For more information on all of this, see the :doc:`django-admin
    documentation </ref/django-admin>`.

Once you're in the shell, explore the :doc:`database API </topics/db/queries>`::

    >>> from polls.models import Question, Choice   # Import the model classes we just wrote.

    # No questions are in the system yet.
    >>> Question.objects.all()
    <QuerySet []>

    # Create a new Question.
    # Support for time zones is enabled in the default settings file, so
    # Django expects a datetime with tzinfo for pub_date. Use timezone.now()
    # instead of datetime.datetime.now() and it will do the right thing.
    >>> from django.utils import timezone
    >>> q = Question(question_text="What's new?", pub_date=timezone.now())

    # Save the object into the database. You have to call save() explicitly.
    >>> q.save()

    # Now it has an ID.
    >>> q.id
    1

    # Access model field values via Python attributes.
    >>> q.question_text
    "What's new?"
    >>> q.pub_date
    datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=<UTC>)

    # Change values by changing the attributes, then calling save().
    >>> q.question_text = "What's up?"
    >>> q.save()

    # objects.all() displays all the questions in the database.
    >>> Question.objects.all()
    <QuerySet [<Question: Question object (1)>]>

Wait a minute. ``<Question: Question object (1)>`` isn't a helpful
representation of this object. Let's fix that by editing the ``Question`` model
(in the ``polls/models.py`` file) and adding a
:meth:`~django.db.models.Model.__str__` method to both ``Question`` and
``Choice``:

.. snippet::
    :filename: polls/models.py

    from django.db import models

    class Question(models.Model):
        # ...
        def __str__(self):
            return self.question_text

    class Choice(models.Model):
        # ...
        def __str__(self):
            return self.choice_text

It's important to add :meth:`~django.db.models.Model.__str__` methods to your
models, not only for your own convenience when dealing with the interactive
prompt, but also because objects' representations are used throughout Django's
automatically-generated admin.

Note these are normal Python methods. Let's add a custom method, just for
demonstration:

.. snippet::
    :filename: polls/models.py

    import datetime

    from django.db import models
    from django.utils import timezone


    class Question(models.Model):
        # ...
        def was_published_recently(self):
            return self.pub_date >= timezone.now() - datetime.timedelta(days=1)

Note the addition of ``import datetime`` and ``from django.utils import
timezone``, to reference Python's standard :mod:`datetime` module and Django's
time-zone-related utilities in :mod:`django.utils.timezone`, respectively. If
you aren't familiar with time zone handling in Python, you can learn more in
the :doc:`time zone support docs </topics/i18n/timezones>`.

Save these changes and start a new Python interactive shell by running
``python manage.py shell`` again::

    >>> from polls.models import Question, Choice

    # Make sure our __str__() addition worked.
    >>> Question.objects.all()
    <QuerySet [<Question: What's up?>]>

    # Django provides a rich database lookup API that's entirely driven by
    # keyword arguments.
    >>> Question.objects.filter(id=1)
    <QuerySet [<Question: What's up?>]>
    >>> Question.objects.filter(question_text__startswith='What')
    <QuerySet [<Question: What's up?>]>

    # Get the question that was published this year.
    >>> from django.utils import timezone
    >>> current_year = timezone.now().year
    >>> Question.objects.get(pub_date__year=current_year)
    <Question: What's up?>

    # Request an ID that doesn't exist, this will raise an exception.
    >>> Question.objects.get(id=2)
    Traceback (most recent call last):
        ...
    DoesNotExist: Question matching query does not exist.

    # Lookup by a primary key is the most common case, so Django provides a
    # shortcut for primary-key exact lookups.
    # The following is identical to Question.objects.get(id=1).
    >>> Question.objects.get(pk=1)
    <Question: What's up?>

    # Make sure our custom method worked.
    >>> q = Question.objects.get(pk=1)
    >>> q.was_published_recently()
    True

    # Give the Question a couple of Choices. The create call constructs a new
    # Choice object, does the INSERT statement, adds the choice to the set
    # of available choices and returns the new Choice object. Django creates
    # a set to hold the "other side" of a ForeignKey relation
    # (e.g. a question's choice) which can be accessed via the API.
    >>> q = Question.objects.get(pk=1)

    # Display any choices from the related object set -- none so far.
    >>> q.choice_set.all()
    <QuerySet []>

    # Create three choices.
    >>> q.choice_set.create(choice_text='Not much', votes=0)
    <Choice: Not much>
    >>> q.choice_set.create(choice_text='The sky', votes=0)
    <Choice: The sky>
    >>> c = q.choice_set.create(choice_text='Just hacking again', votes=0)

    # Choice objects have API access to their related Question objects.
    >>> c.question
    <Question: What's up?>

    # And vice versa: Question objects get access to Choice objects.
    >>> q.choice_set.all()
    <QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>
    >>> q.choice_set.count()
    3

    # The API automatically follows relationships as far as you need.
    # Use double underscores to separate relationships.
    # This works as many levels deep as you want; there's no limit.
    # Find all Choices for any question whose pub_date is in this year
    # (reusing the 'current_year' variable we created above).
    >>> Choice.objects.filter(question__pub_date__year=current_year)
    <QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>

    # Let's delete one of the choices. Use delete() for that.
    >>> c = q.choice_set.filter(choice_text__startswith='Just hacking')
    >>> c.delete()

For more information on model relations, see :doc:`Accessing related objects
</ref/models/relations>`. For more on how to use double underscores to perform
field lookups via the API, see :ref:`Field lookups <field-lookups-intro>`. For
full details on the database API, see our :doc:`Database API reference
</topics/db/queries>`.

Introducing the Django Admin
============================

.. admonition:: Philosophy

    Generating admin sites for your staff or clients to add, change, and delete
    content is tedious work that doesn't require much creativity. For that
    reason, Django entirely automates creation of admin interfaces for models.

    Django was written in a newsroom environment, with a very clear separation
    between "content publishers" and the "public" site. Site managers use the
    system to add news stories, events, sports scores, etc., and that content is
    displayed on the public site. Django solves the problem of creating a
    unified interface for site administrators to edit content.

    The admin isn't intended to be used by site visitors. It's for site
    managers.

Creating an admin user
----------------------

First we'll need to create a user who can login to the admin site. Run the
following command:

.. code-block:: console

    $ python manage.py createsuperuser

Enter your desired username and press enter.

.. code-block:: text

    Username: admin

You will then be prompted for your desired email address:

.. code-block:: text

    Email address: admin@example.com

The final step is to enter your password. You will be asked to enter your
password twice, the second time as a confirmation of the first.

.. code-block:: text

    Password: **********
    Password (again): *********
    Superuser created successfully.

Start the development server
----------------------------

The Django admin site is activated by default. Let's start the development
server and explore it.

If the server is not running start it like so:

.. code-block:: console

    $ python manage.py runserver

Now, open a Web browser and go to "/admin/" on your local domain -- e.g.,
http://127.0.0.1:8000/admin/. You should see the admin's login screen:

.. image:: _images/admin01.png
   :alt: Django admin login screen

Since :doc:`translation </topics/i18n/translation>` is turned on by default,
the login screen may be displayed in your own language, depending on your
browser's settings and if Django has a translation for this language.

Enter the admin site
--------------------

Now, try logging in with the superuser account you created in the previous step.
You should see the Django admin index page:

.. image:: _images/admin02.png
   :alt: Django admin index page

You should see a few types of editable content: groups and users. They are
provided by :mod:`django.contrib.auth`, the authentication framework shipped
by Django.

Make the poll app modifiable in the admin
-----------------------------------------

But where's our poll app? It's not displayed on the admin index page.

Just one thing to do: we need to tell the admin that ``Question``
objects have an admin interface. To do this, open the :file:`polls/admin.py`
file, and edit it to look like this:

.. snippet::
    :filename: polls/admin.py

    from django.contrib import admin

    from .models import Question

    admin.site.register(Question)

Explore the free admin functionality
------------------------------------

Now that we've registered ``Question``, Django knows that it should be displayed on
the admin index page:

.. image:: _images/admin03t.png
   :alt: Django admin index page, now with polls displayed

Click "Questions". Now you're at the "change list" page for questions. This page
displays all the questions in the database and lets you choose one to change it.
There's the "What's up?" question we created earlier:

.. image:: _images/admin04t.png
   :alt: Polls change list page

Click the "What's up?" question to edit it:

.. image:: _images/admin05t.png
   :alt: Editing form for question object

Things to note here:

* The form is automatically generated from the ``Question`` model.

* The different model field types (:class:`~django.db.models.DateTimeField`,
  :class:`~django.db.models.CharField`) correspond to the appropriate HTML
  input widget. Each type of field knows how to display itself in the Django
  admin.

* Each :class:`~django.db.models.DateTimeField` gets free JavaScript
  shortcuts. Dates get a "Today" shortcut and calendar popup, and times get
  a "Now" shortcut and a convenient popup that lists commonly entered times.

The bottom part of the page gives you a couple of options:

* Save -- Saves changes and returns to the change-list page for this type of
  object.

* Save and continue editing -- Saves changes and reloads the admin page for
  this object.

* Save and add another -- Saves changes and loads a new, blank form for this
  type of object.

* Delete -- Displays a delete confirmation page.

If the value of "Date published" doesn't match the time when you created the
question in :doc:`Tutorial 1</intro/tutorial01>`, it probably
means you forgot to set the correct value for the :setting:`TIME_ZONE` setting.
Change it, reload the page and check that the correct value appears.

Change the "Date published" by clicking the "Today" and "Now" shortcuts. Then
click "Save and continue editing." Then click "History" in the upper right.
You'll see a page listing all changes made to this object via the Django admin,
with the timestamp and username of the person who made the change:

.. image:: _images/admin06t.png
   :alt: History page for question object

When you're comfortable with the models API and have familiarized yourself with
the admin site, read :doc:`part 3 of this tutorial</intro/tutorial03>` to learn
about how to add more views to our polls app.
