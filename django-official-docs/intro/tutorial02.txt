
=====================================
创作你的第一个 Django app, part 2
=====================================

本教程紧接 :doc:`Tutorial 1 </intro/tutorial01>` 之后。
我们将设置数据库，创建第一个model，并且对Django自动生成admin站点做简短介绍。

数据库设置
==============

现在，打开 :file:`mysite/settings.py`。它是一个表示Django设置的带模块级变量的普通Python模块。

缺省情况下的配置使用SQLite数据库。如果你对数据库不熟悉，或者只是想尝试一下Django，
它就是最省力的选择。SQLite包含在Python中，因此不需要再安装其它代码库以支持数据库。
然而，当启动一个真实项目，你需要一个伸缩性更好的数据库比如PostgreSQL，用以避免数据库切换的困扰。

如果希望采用非SQLite数据库，安装合适的 :ref:`database
bindings <database-installation>` 并修改
:setting:`DATABASES` ``'default'`` 配置项中下面的键以适配数据库连接：

* :setting:`ENGINE <DATABASE-ENGINE>` -- Either
  ``'django.db.backends.sqlite3'``,
  ``'django.db.backends.postgresql'``,
  ``'django.db.backends.mysql'``, or
  ``'django.db.backends.oracle'``. Other backends are :ref:`also available
  <third-party-notes>`.

* :setting:`NAME` -- 数据库名称。如果使用SQLite，数据库将会是你电脑中的一个文件；
  那样的话， :setting:`NAME`应该是全路径的绝对地址，包括文件名称。
  缺省值 ``os.path.join(BASE_DIR, 'db.sqlite3')``的设置将文件存储在工程路径下。

如果不使用SQLite作为项目的数据库，需要添加诸如：
:setting:`USER`, :setting:`PASSWORD`, and :setting:`HOST`的附加设置。
更多详情见 :setting:`DATABASES`.

.. admonition:: SQLite之外的数据库

    如果没有在使用SQLite，请确保你已经创建了数据库。
    在数据库的交互环境下输入： "``CREATE DATABASE database_name;``"。


    还要确保:file:`mysite/settings.py`中的数据库用户拥有"create database" 权限。
    这允许Django框架稍后的内容中自动创建一个测试数据库。

    如果使用SQLite，就不需要提前创建 - 数据库文件将在需要时自动创建。

当编辑 :file:`mysite/settings.py`时，设置 :setting:`TIME_ZONE` 为你的时区。

同时，注意文件顶部的 :setting:`INSTALLED_APPS`设置。它放置了该Django实例下的
所有Django应用名。Apps可以用在多个工程中，可以打包并分发它们供他人使用。

缺省情况下， :setting:`INSTALLED_APPS` 包含了如下的apps， 它们全部来自Django：

* :mod:`django.contrib.admin` -- 管理站点。很快就会用到它。

* :mod:`django.contrib.auth` -- 认证系统

* :mod:`django.contrib.contenttypes` -- 内容类型框架

* :mod:`django.contrib.sessions` -- session框架

* :mod:`django.contrib.messages` -- 消息框架

* :mod:`django.contrib.staticfiles` -- 管理静态类型文件框架

缺省情况下已经包含了这些应用，以便于应对多数场景。

这些应用中的一部分使用了至少一张数据库表，因此我们需要在数据库中创建数据库表。
为了达到目的，运行下面的命令：

.. code-block:: console

    $ python manage.py migrate

:djadmin:`migrate` 命令按照 :setting:`INSTALLED_APPS` 设置
并根据:file:`mysite/settings.py` 中的配置创建和更改必要的数据库表（之后会讲到）。
运行后能看到该命令运行并起效的信息。
如果感兴趣，运行你数据库的命令行客户端并输入 ``\dt`` (PostgreSQL), ``SHOW TABLES;`` (MySQL), ``.schema``
(SQLite), or ``SELECT TABLE_NAME FROM USER_TABLES;`` (Oracle) 以显示Django'创建的数据库表。

.. admonition:: 写给极简主义者

    正如上面所说，默认的应用被包含在工程中以应付通用场景。
    如果你觉得不需要它们全部，在运行:django:`migrate`前将:setting:`INSTALLED_APPS`中对应的内容删除或注释。
    :djadmin:`migrate` 命令只会运行:setting:`INSTALLED_APPS`中的迁移。

创建模型
===============

现在我们将定义模型 -- 实质上就是数据库结构，和附加的源数据。

.. admonition:: 哲学

   模型是你的数据简单，可信的源头。
   它包含了你所存储的数据必要的字段和行为。
   Django遵循:ref:`DRY Principle <dry>`。
   它的目标是在一个地方定义数据模型并且自动对其进行自动派生。

   这包括了迁移 - 不像Ruby On Rails，比如迁移自模型文件派生而来，
   并且本质上只是Django可以滚动更新数据库模式以匹配当前模型的历史。

在我们简单的poll app中，将创建两个模型： ``Question`` 和 ``Choice``。
``Question`` 拥有question 和 publication date两个字段。 ``Choice`` 拥有两个字段：
选择的文本和对应的投票。 每一个``Choice`` 关联一个``Question``。

这些概念使用简单的Python类表达。如下编辑
:file:`polls/models.py` 文件：

.. snippet::
    :filename: polls/models.py

    from django.db import models


    class Question(models.Model):
        question_text = models.CharField(max_length=200)
        pub_date = models.DateTimeField('date published')


    class Choice(models.Model):
        question = models.ForeignKey(Question, on_delete=models.CASCADE)
        choice_text = models.CharField(max_length=200)
        votes = models.IntegerField(default=0)

代码直来直去。每一个模型都通过继承类:class:`django.db.models.Model`来表示。
 每个模型都有一些类变量，它们各自代表了数据库的一个字段。

每一个字段都被表示为一个:class:`~django.db.models.Field`
类 -- 比如, :class:`~django.db.models.CharField` 代表字符型，
:class:`~django.db.models.DateTimeField` 代表DateTime型。
这（就能）告诉Django各字段分别是什么类型。

每一个 :class:`~django.db.models.Field` 实例的名称(e.g.
``question_text`` or ``pub_date``) 就是域的名称，使用机器友好的格式。
你将在Python代码中使用这个值，并且数据库中也使用它作为列名。

你可以通过为:class:`~django.db.models.Field` 类在
（构造函数的）第一位置指定可选的别名参数以便人类阅读。
这在Django中一些涉及内省的地方使用过，而且它也可以作为文档来使用。
如果这个域（参数）没有被提供，Django将使用机器可读的名称。
在本文的例子中，我们已经切仅为``Question.pub_date``定义了一个人类可读的名称。
对于其他的模型中的域，它们的机器可读的名称满足作为人类可读名称的作用。


一些 :class:`~django.db.models.Field` 类有必填参数。
比如:class:`~django.db.models.CharField`, 它需要给出属性
:attr:`~django.db.models.CharField.max_length`。它不仅仅用在数据库的格式中，
也用在字段验证中，正如我们将要看到的那样。

:class:`~django.db.models.Field`类同时也能拥有各种各样的可选参数：
在这个例子中，我们设置了``votes``的:attr:`~django.db.models.Field.default` 值为0。

最后，注意我们已经定义了一种关系，使用
:class:`~django.db.models.ForeignKey`。
这告诉Django每一个``Choice``对应一个单独的``Question``类。
Django支持所有数据库表对应关系：many-to-one, many-to-many, 以及one-to-one。

激活模型
=================

上面的少数代码给了Django不少的信息。使用他们，Django可以做到：

* 构造数据库表结构 (``CREATE TABLE`` statements)。
* 构造基于Python的数据库访问API以访问：``Question``和``Choice`` 对象。

但首先我们得先告诉工程``polls`` app安装在哪里。

.. admonition:: 哲学

    Django apps是“插件化的”：你可以在不同的工程中使用同一个app，而且可以分发app们，
    因为它们不必绑定到给定的Django安装。

为了将这个app包含到你的工程中，我们需要将配置类的引用加入到:setting:`INSTALLED_APPS` 设置中。
``PollsConfig`` 类在:file:`polls/apps.py` 文件中，所以它的点号路径就是：
``'polls.apps.PollsConfig'``。 编辑 :file:`mysite/settings.py` 文件并将点号路径加入到
:setting:`INSTALLED_APPS` 设置中。就像这样：


.. snippet::
    :filename: mysite/settings.py

    INSTALLED_APPS = [
        'polls.apps.PollsConfig',
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
    ]

现在Django知道需要包含``polls`` app了，让我们运行另外一个命令：

.. code-block:: console

    $ python manage.py makemigrations polls

你将看到类似于下面的内容：

.. code-block:: text

    Migrations for 'polls':
      polls/migrations/0001_initial.py:
        - Create model Choice
        - Create model Question
        - Add field question to choice

通过运行``makemigrations``命令，等于是告诉Django你的模型产生了变化（本例中是新建了两张表）
且你希望这些变化通过*migration*保存。

迁移（文件）就是Django如何存储模型的改动(例如数据库模型) -它们仅仅是硬盘上的文件。
如果需要，可以阅读新模型的迁移（文件）。它就是文件
``polls/migrations/0001_initial.py``。
别担心，不需要每次Django创建它们时都阅读，但它们被设计成人类可读的，
以防你想要对它们进行微调。

有一个命令用于运行迁移并并自动管理数据库模式- 那就是 :djadmin:`migrate`，
我们稍后再研究它 - 在这之前，让我们先看看那次迁移会运行什么SQL。
:djadmin:`sqlmigrate` 命令获取了迁移名称并返回它们的SQL：

.. code-block:: console

    $ python manage.py sqlmigrate polls 0001

你将能看到类似下面的内容（我们已经重新排版便于阅读）：

.. code-block:: sql

    BEGIN;
    --
    -- Create model Choice
    --
    CREATE TABLE "polls_choice" (
        "id" serial NOT NULL PRIMARY KEY,
        "choice_text" varchar(200) NOT NULL,
        "votes" integer NOT NULL
    );
    --
    -- Create model Question
    --
    CREATE TABLE "polls_question" (
        "id" serial NOT NULL PRIMARY KEY,
        "question_text" varchar(200) NOT NULL,
        "pub_date" timestamp with time zone NOT NULL
    );
    --
    -- Add field question to choice
    --
    ALTER TABLE "polls_choice" ADD COLUMN "question_id" integer NOT NULL;
    ALTER TABLE "polls_choice" ALTER COLUMN "question_id" DROP DEFAULT;
    CREATE INDEX "polls_choice_7aa0f6ee" ON "polls_choice" ("question_id");
    ALTER TABLE "polls_choice"
      ADD CONSTRAINT "polls_choice_question_id_246c99a640fbbd72_fk_polls_question_id"
        FOREIGN KEY ("question_id")
        REFERENCES "polls_question" ("id")
        DEFERRABLE INITIALLY DEFERRED;

    COMMIT;

记住下面几点：

* 具体的输出根据根据你所依赖的数据库的不同而不同。上述的例子专为PostgreSQL生成。

* 表名的生成结合了app的名字(``polls``) 以及模型的小写字母名称-- ``question`` 和
  ``choice``。（可以自己覆盖这项设定）

* 主键自动加入。（同样可以自己覆盖这项设定）。

* 依据惯例，Django在外键的字段名后加入``"_id"``。（同样可以自己覆盖这项设定）

* 使用``FOREIGN KEY``约束来明确外键关系。不要担心``DEFERRABLE``部分；
  它只是告诉PostgreSQL不要在事务的结尾执行外键操作。

* 它是为你所使用的数据库量身定制的，因此各数据库特定的字段例如
``auto_increment`` (MySQL), ``serial`` (PostgreSQL), or ``integer
  primary key autoincrement`` (SQLite) 都是自动生成的。
  字段名称的双引号和单引号也是一样。

* 命令:djadmin:`sqlmigrate` 不会运行在你的数据库里运行迁移
  - 它只是将Django认为需要的SQL打印到屏幕上。
  当检查Django下一步做什么或者数据库管理员需要修改SQL脚本时会非常有用。

如果感兴趣，可以运行:djadmin:`python manage.py check <check>`命令。
this checks for any problems in
your project without making migrations or touching the database.

现在，再次运行:djadmin:`migrate`创建模型数据表。

.. code-block:: console

    $ python manage.py migrate
    Operations to perform:
      Apply all migrations: admin, auth, contenttypes, polls, sessions
    Running migrations:
      Rendering model states... DONE
      Applying polls.0001_initial... OK

:djadmin:`migrate` 命令使得所有未实现的命令生效
（Django使用名为``django_migrations``的数据库表跟踪哪些已经生效）
并运行它们修改数据库-实质上，就是同步你在模型中所做的修改到数据库中。

迁移非常有用，可以让你随时修改自己的模型，开发的时候，不需要删除数据库或数据库表并新建
- 它专为更新数据库，而不会丢失数据。我们将在后面的部分深入的讲讲它，
但现在，你只需记住修改模型生效的三步：

* 修改模型类 (in ``models.py``).
* 运行 :djadmin:`python manage.py makemigrations <makemigrations>` 来为改动创建迁移。
* 运行 :djadmin:`python manage.py migrate <migrate>` 来讲修改结构迁移到数据库。

将创建迁移和迁移实施设计为分开的命令的原因是你将提交迁移到版本控制系统中
并将它们和app放在一起；不仅要使得开发更简单，而且它们还会被其他的开发者所使用。

阅读:doc:`django-admin documentation </ref/django-admin>` 获取完整的使用``manage.py``命令的信息。


使用API
====================

现在，我们来进入Python shell 的交互环境并使用Django api。
先使用下面的命令进入Python shell。

.. code-block:: console

    $ python manage.py shell

使用这个命令代替简单的输入"python"，因为:file:`manage.py`
设置了 ``DJANGO_SETTINGS_MODULE`` 环境变量，它把:file:`mysite/settings.py`的引入路径告诉了Django。

.. admonition:: 省略 manage.py

    如果你不想使用:file:`manage.py`，这也是没问题的。
    只需要设置:envvar:`DJANGO_SETTINGS_MODULE` 环境变量为
    ``mysite.settings``，开启一个纯Python环境，并设置Django：

    .. code-block:: pycon

        >>> import django
        >>> django.setup()

    如果这句代码产生了一个:exc:`AttributeError`错误，可能是你的Django版本与手册不一致。
    要么切换到旧版本的手册，要么更换成更新的Django版本。

    必须保证运行``python`` 时的路径与:file:`manage.py` 所在路径一致，或者那个路径在Python路径之下，
    只有这样``import mysite``才生效。

    获取更多的信息，请查看:doc:`django-admin
    documentation </ref/django-admin>`.

一旦你进入了shell，查看:doc:`database API </topics/db/queries>`::

    >>> from polls.models import Question, Choice   # Import the model classes we just wrote.

    # No questions are in the system yet.
    >>> Question.objects.all()
    <QuerySet []>

    # Create a new Question.
    # Support for time zones is enabled in the default settings file, so
    # Django expects a datetime with tzinfo for pub_date. Use timezone.now()
    # instead of datetime.datetime.now() and it will do the right thing.
    >>> from django.utils import timezone
    >>> q = Question(question_text="What's new?", pub_date=timezone.now())

    # Save the object into the database. You have to call save() explicitly.
    >>> q.save()

    # Now it has an ID.
    >>> q.id
    1

    # Access model field values via Python attributes.
    >>> q.question_text
    "What's new?"
    >>> q.pub_date
    datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=<UTC>)

    # Change values by changing the attributes, then calling save().
    >>> q.question_text = "What's up?"
    >>> q.save()

    # objects.all() displays all the questions in the database.
    >>> Question.objects.all()
    <QuerySet [<Question: Question object (1)>]>

等一等，``<Question: Question object (1)>`` 的显示并不能很好的表示这个对象。
我们来通过编辑``Question`` 模型
(在``polls/models.py`` 文件中)并在``Question`` and
``Choice``加入:meth:`~django.db.models.Model.__str__` 方法来修复这个问题：

.. snippet::
    :filename: polls/models.py

    from django.db import models

    class Question(models.Model):
        # ...
        def __str__(self):
            return self.question_text

    class Choice(models.Model):
        # ...
        def __str__(self):
            return self.choice_text

加入:meth:`~django.db.models.Model.__str__` 方法对模型来说非常重要，
不仅仅便于处理交互提示，而且在Django自动生成的admin模块中也要用到它。

注意它们都是普通的Python方法。我们来添加一个自定义方法，仅仅作为演示：

.. snippet::
    :filename: polls/models.py

    import datetime

    from django.db import models
    from django.utils import timezone


    class Question(models.Model):
        # ...
        def was_published_recently(self):
            return self.pub_date >= timezone.now() - datetime.timedelta(days=1)

注意 ``import datetime`` 和 ``from django.utils import
timezone``的引入，是为了引用Python的标准模块:mod:`datetime`和 Django中:mod:`django.utils.timezone`模块的
time-zone-related 的通用操作。如果对Python中的time zone操作不熟悉，
请查看:doc:`time zone support docs </topics/i18n/timezones>`。

保存变动，并开启新的交互式shell环境，运行
``python manage.py shell`` ::

    >>> from polls.models import Question, Choice

    # Make sure our __str__() addition worked.
    >>> Question.objects.all()
    <QuerySet [<Question: What's up?>]>

    # Django provides a rich database lookup API that's entirely driven by
    # keyword arguments.
    >>> Question.objects.filter(id=1)
    <QuerySet [<Question: What's up?>]>
    >>> Question.objects.filter(question_text__startswith='What')
    <QuerySet [<Question: What's up?>]>

    # Get the question that was published this year.
    >>> from django.utils import timezone
    >>> current_year = timezone.now().year
    >>> Question.objects.get(pub_date__year=current_year)
    <Question: What's up?>

    # Request an ID that doesn't exist, this will raise an exception.
    >>> Question.objects.get(id=2)
    Traceback (most recent call last):
        ...
    DoesNotExist: Question matching query does not exist.

    # Lookup by a primary key is the most common case, so Django provides a
    # shortcut for primary-key exact lookups.
    # The following is identical to Question.objects.get(id=1).
    >>> Question.objects.get(pk=1)
    <Question: What's up?>

    # Make sure our custom method worked.
    >>> q = Question.objects.get(pk=1)
    >>> q.was_published_recently()
    True

    # Give the Question a couple of Choices. The create call constructs a new
    # Choice object, does the INSERT statement, adds the choice to the set
    # of available choices and returns the new Choice object. Django creates
    # a set to hold the "other side" of a ForeignKey relation
    # (e.g. a question's choice) which can be accessed via the API.
    >>> q = Question.objects.get(pk=1)

    # Display any choices from the related object set -- none so far.
    >>> q.choice_set.all()
    <QuerySet []>

    # Create three choices.
    >>> q.choice_set.create(choice_text='Not much', votes=0)
    <Choice: Not much>
    >>> q.choice_set.create(choice_text='The sky', votes=0)
    <Choice: The sky>
    >>> c = q.choice_set.create(choice_text='Just hacking again', votes=0)

    # Choice objects have API access to their related Question objects.
    >>> c.question
    <Question: What's up?>

    # And vice versa: Question objects get access to Choice objects.
    >>> q.choice_set.all()
    <QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>
    >>> q.choice_set.count()
    3

    # The API automatically follows relationships as far as you need.
    # Use double underscores to separate relationships.
    # This works as many levels deep as you want; there's no limit.
    # Find all Choices for any question whose pub_date is in this year
    # (reusing the 'current_year' variable we created above).
    >>> Choice.objects.filter(question__pub_date__year=current_year)
    <QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>

    # Let's delete one of the choices. Use delete() for that.
    >>> c = q.choice_set.filter(choice_text__startswith='Just hacking')
    >>> c.delete()

获得更多关于模型关系的信息，请查看:doc:`Accessing related objects
</ref/models/relations>`。获得更多的如何查找API使用双下划线的信息，请参考：
 :doc:`Database API reference </topics/db/queries>`.

介绍 Django Admin
============================

.. admonition:: 哲学

    为员工或客户创建admin网站并对上面的内容进行增删改查是枯燥的，而且并不需要什么创造性。
    由于这个原因，Dnango完全自动化的为模型创建了admin管理接口。

    Django是在新闻编辑室写的，“内容出版者”和“公共”站点区分得很清楚。
    站点管理者使用系统添加故事，事件，体育比赛比分，等，这些内容显示在公共站点上。
    Django解决了如何为网站管理者创建统一管理接口的问题。

    admin站点不是搭建给普通访问者使用的，而是给站点的管理者使用。

创建一个admin用户
----------------------

首先我们得创建一个用户用以登录admin站点，运行下面的命令：

.. code-block:: console

    $ python manage.py createsuperuser

输入用户名并回车：

.. code-block:: text

    Username: admin

下一步会提示输入email：

.. code-block:: text

    Email address: admin@example.com

最后一步是输入密码，将被要求输入两次。

.. code-block:: text

    Password: **********
    Password (again): *********
    Superuser created successfully.

启动开发服务器
----------------------------

缺省情况下，Django的admin站点是激活的。让我们启动开发服务器并探索一番。

如果服务器没有启动，那么这样：

.. code-block:: console

    $ python manage.py runserver

现在，打开浏览器并转到本机的“/admin/”路径 -- 比如,
http://127.0.0.1:8000/admin/。你将会看到登录页面：

.. image:: _images/admin01.png
   :alt: Django admin login screen

既然:doc:`translation </topics/i18n/translation>` 缺省情况下是打开的，
登录屏幕将会显示你自己的语言，这取决于你的浏览器设置和Django是否有该语言的翻译。

进入admin站点
--------------------

现在，使用之前创建的超级用户账户登录系统，你将看到Django admin站点的首页：

.. image:: _images/admin02.png
   :alt: Django admin index page

你将看到一些可编辑内容：groups 和 users。
他们由模块:mod:`django.contrib.auth`提供，该模块是Django的认证框架。

使得poll app 中的修改在admin中生效
-----------------------------------------

但是我们的poll app在哪呢？它并没有在admin的首页中显示啊。

只有一步需要做：我们需要告诉admin站点``Question``对象有一个admin接口。
想要如此，打开:file:`polls/admin.py`文件，并如下面所示编辑：


.. snippet::
    :filename: polls/admin.py

    from django.contrib import admin

    from .models import Question

    admin.site.register(Question)

探索免费的admin功能
------------------------------------

现在我们已经注册了``Question``， Django 已经知晓了它将显示在admin的主页之上：

.. image:: _images/admin03t.png
   :alt: Django admin index page, now with polls displayed

点击"Questions"。现在你在问题的“change list”页面。
这个页面显示了数据库中的所有问题并且使得你可以选择其中一个加以编辑。
里面有一个“what's up?”问题，它是我们早些时候创建的：

.. image:: _images/admin04t.png
   :alt: Polls change list page

点击 "What's up?" 问题来编辑它：

.. image:: _images/admin05t.png
   :alt: Editing form for question object

注意一下几点：

* 表单自动创建自``Question`` 模型。

* 不同的域类型(:class:`~django.db.models.DateTimeField`,
  :class:`~django.db.models.CharField`) 对应不同的HTML输入组件。
  每一种域类型都知道如何显示在Django的admin站点上。

* 每一个:class:`~django.db.models.DateTimeField` 都有免费的JavaScript shortcuts。
  Date获得"Today"shortcut和日历的弹出框，times获得"Now" shortcut 和一个简便的时间弹出框。

页面的底部给出了一组选项：

* Save -- 保存更改并返回chang
e-list页面。

* Save and continue editing -- 保存更改并重载该对象的管理页面。

* Save and add another -- 保存更改并加载一个新的，空的该类行对象表单。

* Delete -- 显示删除确认页面。

如果"Date published" 的值和你在:doc:`Tutorial 1</intro/tutorial01>`创建question时候的值不一致，
这可能是因为忘记为:setting:`TIME_ZONE` 设置正确的值。
改变它，并检查修改后的显示是否正确。

点击"Today"和"Now"shortcuts 改变"Date published" 。
然后点击"Save and continue editing"。
然后点击右上部的"History"。
你将会看到页面罗列了这个对象在Django admin中的所有变化记录，
记录包含了时间戳和做出修改的用户名。

.. image:: _images/admin06t.png
   :alt: History page for question object

当你对模型相关API和admin站点熟悉后，阅读 :doc:`part 3 of this tutorial</intro/tutorial03>`
来学习如何将更多的视图加入到polls app中来。
