=====================================
创作你的第一个 Django app, part 1
=====================================

让我们跟着例子学习。

完成这个教程，你能够创建一个投票的应用程序。

这个应用程序由一下两个部分组成：

* 一个提供人们查看选项并进行投票的网站。
* 一个具备增删改投票选项的后台管理。

我们假设您已经完成 :doc:`Django installed </intro/install>` 的准备。你可以通过在命令行提示符下运行以下的命来判断你所安装的Django是哪一个版本。 ( $ 符号指明后边根的是命令):

.. code-block:: console

    $ python -m django --version

如果 Django 已经正确的安装了, 你将能够看到版本信息。否则，你见看到一条错误信息"No module named django"。

本教程对应的 Django 版本是 |version| ，该版本支持 Python 3.4 以及更高的版本。如果 Django 的版本不匹配，你可以通过右下角的版本选线切换到与你的 Django 版本匹配的教程，你也可以将你的 Django 升级到本教程对应的版本。 如果你正在使用较早版本的 Python，可以通过链接 :ref:`faq-python-version-support` 找到与之匹配的 Django 版本。

查看 :doc:`How to install Django </topics/install>` 文档提供了如何卸载老版本的 Django 并安装最新版的方法。

.. admonition:: 在哪里获取帮助信息:

    如果你在使用本教程的过程中碰到困难，请在 |django-users| 写下您的困难，或者到 `#django on irc.freenode.net
    <irc://irc.freenode.net/django>`_ 与其他的 Django users 用户交流，他们或许能够解决您的问题。

创建一个工程
==================

如果这是你第一次使用 Django, 您最好在做初始化步骤的时候多花点心思。 也就是说。 你将会使用到一些自动生成的功能来创建一个 Django :term:`project` -- 为一个 Django 实例进行一些列的设置，包括数据库配置，Django的说明性的选项以及应用程序级的一些配置。

通过命令行工具, ``cd`` 进入一个你打算用来存放胆码的目录，然后执行以下的命令：

.. code-block:: console

   $ django-admin startproject mysite

这个命令将会在当前目录创建一个 ``mysite`` 文件夹。如果没有，请查看 :ref:`troubleshooting-django-admin`.

.. note::

    您需要避免使用 Python 或 Django 内部组件的名称来命名您的工程。具体来说，着意味着不要使用诸如  ``django`` (这样的名称和 Django 冲突) 或者 ``test`` (这个会与 Python 内建的包名冲突).

.. admonition:: Where should this code live?

    如果你有使用早先的纯 PHP 的经验 (现代的框架已经不这么用了)，你可能习惯于把代码放在 Web 服务器的根目录下 (例如 ``/var/www``)。使用 Django 时，您不用这样做。把 Python 代码放在Web服务器的根目录下并不是一个好主意，这样做会让代码通过Web浏览暴露给用户的风险。这是一种不安全的做法。

    将你的地忙放在文档的根目录 **之外** ，例如
    :file:`/home/mycode`.

让我们来看一下 :djadmin:`startproject` 命令创建了什么::

    mysite/
        manage.py
        mysite/
            __init__.py
            settings.py
            urls.py
            wsgi.py

这些文件的含义如下：

* 最外层 :file:`mysite/` 作为工程的根目录包含了所有的内容。它的名字可以任意命名；您可以把它修改成任何你喜欢的名字。

* :file:`manage.py`: 一个命令行的工具，通过他你可以使用多种方式操作这个工程。你可以查看所有关于
  :file:`manage.py` 的信息在 :doc:`/ref/django-admin`里。

* 内层 :file:`mysite/` 目录是这个工程的 Python 包。他的名字就是Python 包的名字，你需要使用这个名字来引入她内部的模块(例如 ``mysite.urls``).

* :file:`mysite/__init__.py`: 一个空的文件，他告诉Python 将这个目录当做一个Python 包来对待。如果您才开始学习 Python ，可以阅读 :ref:`more about packages <tut-packages>` 在官方的 Python 文档中。

* :file:`mysite/settings.py`: 设置/配置这个 Django 工程。  :doc:`/topics/settings` 将会告诉你这些配置如何运作。

* :file:`mysite/urls.py`: Django 工程的 URL 申明；就像一个基于Django技术的网站的 "目录"。您可以获得更多的 URLs 相关的信息从 :doc:`/topics/http/urls`.

* :file:`mysite/wsgi.py`: 一个为了让你的工程兼容 WSGI web 服务的入口。查阅 :doc:`/howto/deployment/wsgi/index` 可以获知跟多的细节。

开发服务器
======================

让我们验证一下 Django 工程是否能正常工作。切换到最层 :file:`mysite` 目录下，如果你还没准备好工程，那么闲执行一下的命令：

.. code-block:: console

   $ python manage.py runserver

你将会在命令行看到一下的输出：

.. parsed-literal::

    Performing system checks...

    System check identified no issues (0 silenced).

    You have unapplied migrations; your app may not work properly until they are applied.
    Run 'python manage.py migrate' to apply them.

    |today| - 15:50:53
    Django version |version|, using settings 'mysite.settings'
    Starting development server at http://127.0.0.1:8000/
    Quit the server with CONTROL-C.

.. note::
    目前，请先忽略未执行数据库迁移的警告信息；稍后我们将处理数据库的的问题。

你已经启动对了 Django 开发服务器，一个纯 Python 书写的轻量级 Web 服务器。我们将这个服务器包含在 Django 中一遍你能够快速投入到开发工作，而不用去配置一个身穿环境——例如 Apache ——除非你已经有了一个生产环境。

现在正是给您一些提示的好时机: **千万别** 把这个web服务用于生产环境。 它仅仅是为了给您提供给开发时的方便。 (我们的强项是做 Web 开发框架，而不是 Web 服务器，你懂的。)

现在服务器已经运行起来了，通过浏览器访问 http://127.0.0.1:8000/ 。您将会看到"Congratulations!" 页面， 上边有一个正在发射的火箭。
It worked!

.. admonition:: 更改端口号

    默认情况下， :djadmin:`runserver` 命令将在一个内部IP的8000端口上启动开发服务器。

    如果你想更改这个端口，可以通过命令行参数的方式。例如，下班的这条命令就将让服务在8080端口启动：

    .. code-block:: console

        $ python manage.py runserver 8080

    如果你想要修改服务器的IP地址，可以和修改端口一块进行。例如，要接受所有的IP进行访问(这个在您需要更换运行的计算机或者需要在其他联网的计算机上展示您的国祚成果时特别有用), 使用如下命令:

    .. code-block:: console

        $ python manage.py runserver 0:8000

    **0** 是对 **0.0.0.0**的简写形式。开发服务器的完整文档可以在 :djadmin:`runserver` 找到。

.. admonition:: 自动加载 :djadmin:`runserver`

    开发服务器会在需要时自动加载 Pyhton 代码。当您修改了代码之后您不需要重启 Web 服务器。然而，想增加文件这样的操作并不会出发自动加载，所有这是你需要手动的重启一下服务一遍加载新增的文件。

Creating the Polls app
======================

Now that your environment -- a "project" -- is set up, you're set to start
doing work.

Each application you write in Django consists of a Python package that follows
a certain convention. Django comes with a utility that automatically generates
the basic directory structure of an app, so you can focus on writing code
rather than creating directories.

.. admonition:: Projects vs. apps

    What's the difference between a project and an app? An app is a Web
    application that does something -- e.g., a Weblog system, a database of
    public records or a simple poll app. A project is a collection of
    configuration and apps for a particular website. A project can contain
    multiple apps. An app can be in multiple projects.

Your apps can live anywhere on your :ref:`Python path <tut-searchpath>`. In
this tutorial, we'll create our poll app right next to your :file:`manage.py`
file so that it can be imported as its own top-level module, rather than a
submodule of ``mysite``.

To create your app, make sure you're in the same directory as :file:`manage.py`
and type this command:

.. code-block:: console

    $ python manage.py startapp polls

That'll create a directory :file:`polls`, which is laid out like this::

    polls/
        __init__.py
        admin.py
        apps.py
        migrations/
            __init__.py
        models.py
        tests.py
        views.py

This directory structure will house the poll application.

Write your first view
=====================

Let's write the first view. Open the file ``polls/views.py``
and put the following Python code in it:

.. snippet::
    :filename: polls/views.py

    from django.http import HttpResponse


    def index(request):
        return HttpResponse("Hello, world. You're at the polls index.")

This is the simplest view possible in Django. To call the view, we need to map
it to a URL - and for this we need a URLconf.

To create a URLconf in the polls directory, create a file called ``urls.py``.
Your app directory should now look like::

    polls/
        __init__.py
        admin.py
        apps.py
        migrations/
            __init__.py
        models.py
        tests.py
        urls.py
        views.py

In the ``polls/urls.py`` file include the following code:

.. snippet::
    :filename: polls/urls.py

    from django.urls import path

    from . import views

    urlpatterns = [
        path('', views.index, name='index'),
    ]

The next step is to point the root URLconf at the ``polls.urls`` module. In
``mysite/urls.py``, add an import for ``django.urls.include`` and insert an
:func:`~django.urls.include` in the ``urlpatterns`` list, so you have:

.. snippet::
    :filename: mysite/urls.py

    from django.urls import include, path
    from django.contrib import admin

    urlpatterns = [
        path('polls/', include('polls.urls')),
        path('admin/', admin.site.urls),
    ]

The :func:`~django.urls.include` function allows referencing other URLconfs.
Whenever Django encounters :func:`~django.urls.include`, it chops off whatever
part of the URL matched up to that point and sends the remaining string to the
included URLconf for further processing.

The idea behind :func:`~django.urls.include` is to make it easy to
plug-and-play URLs. Since polls are in their own URLconf
(``polls/urls.py``), they can be placed under "/polls/", or under
"/fun_polls/", or under "/content/polls/", or any other path root, and the
app will still work.

.. admonition:: When to use :func:`~django.urls.include()`

    You should always use ``include()`` when you include other URL patterns.
    ``admin.site.urls`` is the only exception to this.

You have now wired an ``index`` view into the URLconf. Lets verify it's
working, run the following command:

.. code-block:: console

   $ python manage.py runserver

Go to http://localhost:8000/polls/ in your browser, and you should see the
text "*Hello, world. You're at the polls index.*", which you defined in the
``index`` view.

The :func:`~django.urls.path` function is passed four arguments, two required:
``route`` and ``view``, and two optional: ``kwargs``, and ``name``.
At this point, it's worth reviewing what these arguments are for.

:func:`~django.urls.path` argument: ``route``
---------------------------------------------

``route`` is a string that contains a URL pattern. When processing a request,
Django starts at the first pattern in ``urlpatterns`` and makes its way down
the list, comparing the requested URL against each pattern until it finds one
that matches.

Patterns don't search GET and POST parameters, or the domain name. For example,
in a request to ``https://www.example.com/myapp/``, the URLconf will look for
``myapp/``. In a request to ``https://www.example.com/myapp/?page=3``, the
URLconf will also look for ``myapp/``.

:func:`~django.urls.path` argument: ``view``
--------------------------------------------

When Django finds a matching pattern, it calls the specified view function with
an :class:`~django.http.HttpRequest` object as the first argument and any
"captured" values from the route as keyword arguments. We'll give an example
of this in a bit.

:func:`~django.urls.path` argument: ``kwargs``
----------------------------------------------

Arbitrary keyword arguments can be passed in a dictionary to the target view. We
aren't going to use this feature of Django in the tutorial.

:func:`~django.urls.path` argument: ``name``
--------------------------------------------

Naming your URL lets you refer to it unambiguously from elsewhere in Django,
especially from within templates. This powerful feature allows you to make
global changes to the URL patterns of your project while only touching a single
file.

When you're comfortable with the basic request and response flow, read
:doc:`part 2 of this tutorial </intro/tutorial02>` to start working with the
database.
