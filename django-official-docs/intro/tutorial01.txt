=====================================
创作你的第一个 Django app, part 1
=====================================

让我们跟着例子学习。

完成这个教程，你能够创建一个投票的应用程序。

这个应用程序由一下两个部分组成：

* 一个提供人们查看选项并进行投票的网站。
* 一个具备增删改投票选项的后台管理。

我们假设您已经完成 :doc:`Django installed </intro/install>` 的准备。你可以通过在命令行提示符下运行以下的命来判断你所安装的Django是哪一个版本。 ( $ 符号指明后边根的是命令):

.. code-block:: console

    $ python -m django --version

如果 Django 已经正确的安装了, 你将能够看到版本信息。否则，你见看到一条错误信息"No module named django"。

本教程对应的 Django 版本是 |version| ，该版本支持 Python 3.4 以及更高的版本。如果 Django 的版本不匹配，你可以通过右下角的版本选线切换到与你的 Django 版本匹配的教程，你也可以将你的 Django 升级到本教程对应的版本。 如果你正在使用较早版本的 Python，可以通过链接 :ref:`faq-python-version-support` 找到与之匹配的 Django 版本。

查看 :doc:`How to install Django </topics/install>` 文档提供了如何卸载老版本的 Django 并安装最新版的方法。

.. admonition:: 在哪里获取帮助信息:

    如果你在使用本教程的过程中碰到困难，请在 |django-users| 写下您的困难，或者到 `#django on irc.freenode.net
    <irc://irc.freenode.net/django>`_ 与其他的 Django users 用户交流，他们或许能够解决您的问题。

创建一个工程
==================

如果这是你第一次使用 Django, 您最好在做初始化步骤的时候多花点心思。 也就是说。 你将会使用到一些自动生成的功能来创建一个 Django :term:`project` -- 为一个 Django 实例进行一些列的设置，包括数据库配置，Django的说明性的选项以及应用程序级的一些配置。

通过命令行工具, ``cd`` 进入一个你打算用来存放胆码的目录，然后执行以下的命令：

.. code-block:: console

   $ django-admin startproject mysite

这个命令将会在当前目录创建一个 ``mysite`` 文件夹。如果没有，请查看 :ref:`troubleshooting-django-admin`.

.. note::

    您需要避免使用 Python 或 Django 内部组件的名称来命名您的工程。具体来说，着意味着不要使用诸如  ``django`` (这样的名称和 Django 冲突) 或者 ``test`` (这个会与 Python 内建的包名冲突).

.. admonition:: Where should this code live?

    如果你有使用早先的纯 PHP 的经验 (现代的框架已经不这么用了)，你可能习惯于把代码放在 Web 服务器的根目录下 (例如 ``/var/www``)。使用 Django 时，您不用这样做。把 Python 代码放在Web服务器的根目录下并不是一个好主意，这样做会让代码通过Web浏览暴露给用户的风险。这是一种不安全的做法。

    将你的地忙放在文档的根目录 **之外** ，例如
    :file:`/home/mycode`.

让我们来看一下 :djadmin:`startproject` 命令创建了什么::

    mysite/
        manage.py
        mysite/
            __init__.py
            settings.py
            urls.py
            wsgi.py

这些文件的含义如下：

* 最外层 :file:`mysite/` 作为工程的根目录包含了所有的内容。它的名字可以任意命名；您可以把它修改成任何你喜欢的名字。

* :file:`manage.py`: 一个命令行的工具，通过他你可以使用多种方式操作这个工程。你可以查看所有关于
  :file:`manage.py` 的信息在 :doc:`/ref/django-admin`里。

* 内层 :file:`mysite/` 目录是这个工程的 Python 包。他的名字就是Python 包的名字，你需要使用这个名字来引入她内部的模块(例如 ``mysite.urls``).

* :file:`mysite/__init__.py`: 一个空的文件，他告诉Python 将这个目录当做一个Python 包来对待。如果您才开始学习 Python ，可以阅读 :ref:`more about packages <tut-packages>` 在官方的 Python 文档中。

* :file:`mysite/settings.py`: 设置/配置这个 Django 工程。  :doc:`/topics/settings` 将会告诉你这些配置如何运作。

* :file:`mysite/urls.py`: Django 工程的 URL 申明；就像一个基于Django技术的网站的 "目录"。您可以获得更多的 URLs 相关的信息从 :doc:`/topics/http/urls`.

* :file:`mysite/wsgi.py`: 一个为了让你的工程兼容 WSGI web 服务的入口。查阅 :doc:`/howto/deployment/wsgi/index` 可以获知跟多的细节。

开发服务器
======================

让我们验证一下 Django 工程是否能正常工作。切换到最层 :file:`mysite` 目录下，如果你还没准备好工程，那么闲执行一下的命令：

.. code-block:: console

   $ python manage.py runserver

你将会在命令行看到一下的输出：

.. parsed-literal::

    Performing system checks...

    System check identified no issues (0 silenced).

    You have unapplied migrations; your app may not work properly until they are applied.
    Run 'python manage.py migrate' to apply them.
    
    |today| - 15:50:53
    Django version |version|, using settings 'mysite.settings'
    Starting development server at http://127.0.0.1:8000/
    Quit the server with CONTROL-C.

.. note::
    目前，请先忽略未执行数据库迁移的警告信息；稍后我们将处理数据库的的问题。

你已经启动对了 Django 开发服务器，一个纯 Python 书写的轻量级 Web 服务器。我们将这个服务器包含在 Django 中一遍你能够快速投入到开发工作，而不用去配置一个身穿环境——例如 Apache ——除非你已经有了一个生产环境。

现在正是给您一些提示的好时机: **千万别** 把这个web服务用于生产环境。 它仅仅是为了给您提供给开发时的方便。 (我们的强项是做 Web 开发框架，而不是 Web 服务器，你懂的。)

现在服务器已经运行起来了，通过浏览器访问 http://127.0.0.1:8000/ 。您将会看到"Congratulations!" 页面， 上边有一个正在发射的火箭。
It worked!

.. admonition:: 更改端口号

    默认情况下， :djadmin:`runserver` 命令将在一个内部IP的8000端口上启动开发服务器。

    如果你想更改这个端口，可以通过命令行参数的方式。例如，下班的这条命令就将让服务在8080端口启动：

    .. code-block:: console

        $ python manage.py runserver 8080

    如果你想要修改服务器的IP地址，可以和修改端口一块进行。例如，要接受所有的IP进行访问(这个在您需要更换运行的计算机或者需要在其他联网的计算机上展示您的国祚成果时特别有用), 使用如下命令:

    .. code-block:: console

        $ python manage.py runserver 0:8000

    **0** 是对 **0.0.0.0**的简写形式。开发服务器的完整文档可以在 :djadmin:`runserver` 找到。

.. admonition:: 自动加载 :djadmin:`runserver`

    开发服务器会在需要时自动加载 Pyhton 代码。当您修改了代码之后您不需要重启 Web 服务器。然而，想增加文件这样的操作并不会出发自动加载，所有这是你需要手动的重启一下服务一遍加载新增的文件。

创建Polls（投票）app
======================

现在你的开发环境 -- 一个 "项目" -- 已经准备好了，你现在就可以开始开发了。

你在 Django 下开发的每一个项目，都是有一些列的Python包构成，这些包都遵循一写习惯用法。 Django 使用自动生成的方式来为你要开发的应用创建这些目录结构,这样你边可以专注在代码的编写上而不用做这些杂事。

.. admonition:: 工程 vs. 应用

    工程（project）与应用（app）之间有什么区别呢？应用是一个 Web 的应用程序例如：一个 web 的日志系统、一个公共记录的应用或者一个投票应用。一个工程是一个集合了一系列应用的网站。一个工程可以包含多个应用。一个应用也可以放到多个工程中。

你的应用可以放在 :ref:`Python path <tut-searchpath>`路径下的任何地方。本教程中,我们会创建投票应用，并建立 :file:`manage.py`文件，这样她便可以在我们的顶层模块中被引用。而不是在 ``mysite``的子模块中引用。

为了你能够顺利创建应用，请确定命令行的当前路径与:file:`manage.py`文件的路径相同，然后输入一下的命令：

.. code-block:: console

    $ python manage.py startapp polls

这条命令将会创建一个文件夹 :file:`polls`，文件夹查看的结构如下所示::

    polls/
        __init__.py
        admin.py
        apps.py
        migrations/
            __init__.py
        models.py
        tests.py
        views.py

这个文件夹就用于存放投票应用的所有相关内容。

编写你的第一个视图
=====================

让我们来编写第一个视图。打开文件 ``polls/views.py``然后输入如下的 Python 代码：

.. snippet::
    :filename: polls/views.py

    from django.http import HttpResponse


    def index(request):
        return HttpResponse("Hello, world. You're at the polls index.")

这应该是 Django 中最简单的视图。为了访问这个视图，我们需要把它映射到一个 URL 地址。为了映射我们需要一个URL的配置文件。

在 polls 文件夹下边创建一个`urls.py`文件，就可以通过它进行URL映射的配置。
你的应用文件夹展开的结构应该如下所示::

    polls/
        __init__.py
        admin.py
        apps.py
        migrations/
            __init__.py
        models.py
        tests.py
        urls.py
        views.py

在 ``polls/urls.py`` 文件里输入以下的代码:

.. snippet::
    :filename: polls/urls.py

    from django.urls import path

    from . import views

    urlpatterns = [
        path('', views.index, name='index'),
    ]

下一步应该指明根 URL配置位于 ``polls.urls`` 模块。在
``mysite/urls.py``文件中，增加对 ``django.urls.include`` 的引用并且插入
:func:`~django.urls.include` 在 ``urlpatterns`` 列表中，完成之后文件内容如下:

.. snippet::
    :filename: mysite/urls.py

    from django.urls import include, path
    from django.contrib import admin
    
    urlpatterns = [
        path('polls/', include('polls.urls')),
        path('admin/', admin.site.urls),
    ]

 :func:`~django.urls.include` 函数可以引用其他的 URL 配置文件。无论在什么位置，只要 Django 遇到 :func:`~django.urls.include` 就会立即引入对应的 URL 配置然后再将引入点之后的配置接在引入配置的后边来进行后续的 URL 匹配工作。

设计 :func:`~django.urls.include` 功能的目的是为了实现即插即用的 URL 配置。既然 polls 应用有自己的 URL 配置 (``polls/urls.py``)，这些配置可以被放置在 "/polls/"目录之下，或者放在"/fun_polls/"目录下，或者放在 "/content/polls/"目录下，或者其他的路径下，不论放在那里都不影响我们的应用正常工作。

.. admonition::当我们使用 :func:`~django.urls.include()`

    你应当总是使用 ``include()`` 当你引用其他的 URL 匹配模式时。
    ``admin.site.urls`` 是唯一的一个例外。

现在你已经写好了一个 ``index`` 视图在 URL 配置文件中。让我们来验证一下它是否能正常工作，运行下边的命令:

.. code-block:: console

   $ python manage.py runserver

在你的浏览器中访问 http://localhost:8000/polls/ ，然后你应当看到 "*Hello, world. You're at the polls index.*"，这些文字是在``index`` 视图中定义的。

 :func:`~django.urls.path` 函数接收四个参数，其中两必须的参数是：
``route`` 和 ``view``，两个可选的参数是: ``kwargs``,和 ``name``.
现在，我们来看一下这些参数有什么作用对后续的工作是很好有价值的。

:func:`~django.urls.path` argument: ``route``
---------------------------------------------

``route`` 是一个包含了 URL 匹配模式的字符串。在处理请求的时候，Django 从 ``urlpatterns`` 定义的模式列表从第一个开始处理，处理方式是使用请求的 URL 与每一个模式即兴对比知道找到一个符合的模式设置。

匹配模式时不 包含 GET 和 POST 请求的参数，也不包含域名。例如，这个请求``https://www.example.com/myapp/``，映射到的 URL 配置是``myapp/``。下边这个请求``https://www.example.com/myapp/?page=3``，映射到的 URL 配置是 ``myapp/``。

:func:`~django.urls.path` argument: ``view``
--------------------------------------------

当 Django 找到一个匹配的 URL 模式，她就会调用指定视图的函数并将 :class:`~django.http.HttpRequest` 对象最为第一个参数传入并且任何从路由作为关键字参数“捕获”到的值也会给被调用的函数。稍后我们将会给出一个对应的示例。

:func:`~django.urls.path` argument: ``kwargs``
----------------------------------------------

任何的参数都可以通过字典的形式传递给目标视图。 本教程中我们不会使用 Django 的这个功能。

:func:`~django.urls.path` argument: ``name``
--------------------------------------------

为你的 URL 命名可以让你更清晰的引用到它们避免歧义，尤其是在使用模板的时候。这是一个非常有用的特性，它使你只需要修改一个文件就能改变你整个工程中的 URL 匹配模式。

当你熟悉了基础的请求和响应的流程，可以进一步阅读
:doc:`part 2 of this tutorial </intro/tutorial02>` 查看如何在 Django 项目中使用数据库。
