=====================================
编写你的第一个 Django 应用, part 5
=====================================

本教程紧接 :doc:`Tutorial 4 </intro/tutorial04>` 之后。
我们已经构建了一个 Web-poll （译注：基于 web 的投票软件）应用，现在我们将要为它创建一些自动化的测试。

自动化测试简介
=============================

自动化测试是什么？
-------------------------

测试为了检查代码行为是否正常的一种简便的手段。

测试可以针对不同层次的目标进行。有些测试时针对一些细节(*一个模型内的方法是否返回了正确的值?*) 而有的测试是针对更上层的软件行为 (*用户在网页上的输入是否得到了预期的结果?*)。这与先前在 :doc:`Tutorial 2 </intro/tutorial02>`中做的测试没有区别， 使用:djadmin:`shell` 来运行一个方法，或者运行应用程序并输入数据检查它是的行为是否符合预期.

对自动化测试来说，区别在于测试工作是有一套系统来完成。你只要创建一些测试，然后修改你开发的代码，你就能价差你的代码是否依然如你期望的那样运行良好，而不用花费时间在手动测试上边。

为什么你需要创建测试
----------------------------

那么为什么需要使用测试，为什么是现在需要？

也许你觉得只要学习了 Python 或 Django 就已经完全足够了，在学习其他的东西就有点画蛇添足显得毫无必要。毕竟，目前看来我们的投票程序效果很好；花力气掌握自动化测试并不会让它去的更好的效果。如果构建这个投票程序是你用 Django 做的最后一件事情，那么，确实你不需要掌握如何创建自动化测试。但是，如果你还需要做更多的应用，这就是开始学习自动化测试最佳的时机。

自动化测试能够节约你的时间
~~~~~~~~~~~~~~~~~~~~~~~~

某种程度上来说, '检查软件是否在正常运行' 就算一个不错的测试了。对更复杂一些的情况来说，它可能需要几十个组件相互之间进行协作。

对其中一个组件进行修改就可能引发软件产生一些异常的情况。还是检查 '能够正常运行' 可能意味着输入大量的测试数据然后运行你的代码用以检查修改是否导致哪一部分发生了损坏，这是对时间极大的浪费。

自动化测试切实能够在极短的时间内帮你完成以上的工作。如果有哪里出了问题，它也能保你定位到引发问题的代码是在哪里。

停下编写代码来做其他的事情似乎让然觉得厌烦，尤其是投入到单调乏味的测试工作中，特别是在你的代码明明运行良好的时候。

然而，编写测试依然比化肥数小时通过手工测试的方法寻找一个新一如的bug要让人感到轻松。

测试不仅仅起到定位问题的作用，测试能够证实它们
​~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

把测试工作当做开发过程中令人厌烦的事情是错误的。

如果没有测试，开发出来的软件是否达到了预期的效果就是无法证实的。即使这些代码都是你亲自编写的，你还是会为了确认软件的真实行为而手动在各项功能中试来试去。

测试能够改变这种情况，它从内部检视你的代码，一旦有什么地方不对劲，它就会明确的指出出问题的地方。（即使在你还没有发现到你的代码已经有bug了的时候）

测试让你的代码更优雅
​~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

或许在你编写的软件中有一些亮点，但是你发现因为它们缺乏对应的测试其他的开发者要复用他们很困难；没有测试，他们不能完全信任这些代码。Jacob Kaplan-Moss，作为 Django 的初始开发者之一，曾今说过“没有测试的代码就是未经设计的。“

驱使你开始为代码编写测试的另一个原因在于，其他的开发者在复用你的代码之前，都强烈希望看到对应的测试。

测试帮助团队更好的协作
​~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

前边提到的各个视角都是从耽搁开发者维护一个软件的角度出发。更复杂一些的软件则需要一个团队来进行维护。测试可以确保其他成员不会一不留神破坏了你的代码(同样也防止你在不知情的情况下破坏了其他人的代码)。如果你想要成为一个 Django 开发者，你必须善于编写测试！

基本的测试策略
========================

这里有一些编写测试的方法。

一些程序员遵循叫做"`测试驱动开发”的开发方式`_"；他们在编码之前先编写测试。这可能和我们的直觉相反，但是确实人们是按照类似的方法做：他们描述一个问题，然后编写一些代码来解决它。测试驱动开发在的方式在 Python 的测试用例中分方便使用。

进一步来说，一个测试技术的初学者会先写一些代码，然后决定哪一部分代码需要测试。也许你觉得要是之前就开始用测试的开发方式就好了，但是现在开始也不算晚。

有时候要找到从什么地方开始写测试是有一些困难的。如果你写过很多的 Python 代码，找到需要测试的地方不会太难。这样，当你要修改代码的时候你就会发现之前写的测试时非常有价值的，不管这些改变是增加一个新功能还是修复一个 bug。

所以让我现在就开始吧。

.. _test-driven development: https://en.wikipedia.org/wiki/Test-driven_development

编写我们的第一个测试
======================

我们来识别一个 bug
-----------------

很幸运，在我们的``投票``应用中有一个小 bug 正等待我们修复：``Question.was_published_recently()`` 方法的返回值为 ``True`` 当 ``Question`` 在最后一天发布出来的时候（这个逻辑是正确的）但是当 ``Question``的 ``pub_date`` 字段是一个未来的日期它也会返回``True`` (这时就不对了).

为了检查这个 bug 是否真的存在，可是使用 Admin 创建一个问题，并将问题的发布日期设置为一个未来的日期，并且通过 :djadmin:`shell`::来检查这个方法

    >>> import datetime
    >>> from django.utils import timezone
    >>> from polls.models import Question
    >>> # 创建一个 Question 实例并将 pub_date 设为30天后的日期
    >>> future_question = Question(pub_date=timezone.now() + datetime.timedelta(days=30))
    >>> # 它在最近被发布了么?
    >>> future_question.was_published_recently()
    True

既然我们将它设置在30天后而不是`近期`，那么这个结果肯定是错误的。

创建一个测试来发现 bug
-------------------------------

我们刚通过 :djadmin:`shell` 所做的，也是我们希望通过自动化测试完成的事情，现在就让我们把它转化为自动化的方式吧。

习惯上我们会吧一个软件的测试放在这个工程的``tests.py`` 文件里; 测试框架将会在任何以``test``开头的文件中加载我们写的测试。

在``polls``项目的``tests.py``文件中输入一下的代码：

.. snippet::
    :filename: polls/tests.py

    import datetime

    from django.utils import timezone
    from django.test import TestCase

    from .models import Question


    class QuestionModelTests(TestCase):

        def test_was_published_recently_with_future_question(self):
            """
            was_published_recently() 方法当问题的 pub_date (发布日期)字段是未来的日期是返回 False。
            """
            time = timezone.now() + datetime.timedelta(days=30)
            future_question = Question(pub_date=time)
            self.assertIs(future_question.was_published_recently(), False)

这里，我们所做的事情是，创建了一个 :class:`django.test.TestCase` 类的子类，并在里边写了一个方法。这个方法创建一个``Question``实例并给它设置一个未来的发布日期。然后，我们检查``was_published_recently()`` 方法的输出- 看输出*是否*是False.

运行测试
-------------

通过命令行，我们可与运行我们编写的测试::

    $ python manage.py test polls

然后你应该看到类似下方的文字显示::

    Creating test database for alias 'default'...
    System check identified no issues (0 silenced).
    F
    ======================================================================
    FAIL: test_was_published_recently_with_future_question (polls.tests.QuestionModelTests)
    ----------------------------------------------------------------------
    Traceback (most recent call last):
      File "/path/to/mysite/polls/tests.py", line 16, in test_was_published_recently_with_future_question
        self.assertIs(future_question.was_published_recently(), False)
    AssertionError: True is not False

    ----------------------------------------------------------------------
    Ran 1 test in 0.001s

    FAILED (failures=1)
    Destroying test database for alias 'default'...

这个命令所做的事情是:

* ``python manage.py test polls`` 命令寻找 ``polls`` 应用里边我们编写的测试

* 它找到的是 :class:`django.test.TestCase` 类的子类

* 为了测试它创建了一个特殊的数据库

* 它寻找需要运行的测试方法 - 测试方法都以 ``test`` 作为前缀

* 在 ``test_was_published_recently_with_future_question`` 方法中创建了一个 ``Question`` 对象的实例，并给他的 ``pub_date`` 字段设置为30天以后的日期

* ... 然后使用 ``assertIs()`` 方法，它可会发现 ``was_published_recently()`` 方法的返回值是 ``True``， 尽管我们希望这个返回值是 ``False``

这个测试告诉我们哪一个测试没有通过，甚至是因为哪一行代码导致的失败。

修复 bug
--------------

我们已经知道了问题是: ``Question.was_published_recently()`` 方法应当返回 ``False`` 当``pub_date`` 字段是一个未来的日期时。 修改
``models.py``文件中的方法, 让它只返回 ``True`` 即使日期是一个过去的日期:

.. snippet::
    :filename: polls/models.py

    def was_published_recently(self):
        now = timezone.now()
        return now - datetime.timedelta(days=1) <= self.pub_date <= now

然后再次运行测试::

    Creating test database for alias 'default'...
    System check identified no issues (0 silenced).
    .
    ----------------------------------------------------------------------
    Ran 1 test in 0.001s

    OK
    Destroying test database for alias 'default'...

在我们发现一个 bug 之后，我们写一个测试来确认它，然后修改我们的代码让代码通过测试。

将来我们的程序还会发生各种各样的 bug ，但是我们可以肯定这个 bug 不会再被引入，因为它一旦发生就会立即被我们之前写的测试发现并提醒我们。有了测试我们就一劳永逸的解决了这个问题。

更复杂一些的测试
------------------------

既然我们已经做了这些测试工作，我们可以进一步的加强 ``was_published_recently()``
方法; 实际上, 当我们修复一个 bug 同时又引入新的 bug 这是很令人沮丧的。

给同一个类再增加两个测试方法，主要是针对更复杂一些的情况:

.. snippet::
    :filename: polls/tests.py

    def test_was_published_recently_with_old_question(self):
        """
        was_published_recently() 返回 False 当 questions 的 pub_date
        是一天之前的日期。
        """
        time = timezone.now() - datetime.timedelta(days=1, seconds=1)
        old_question = Question(pub_date=time)
        self.assertIs(old_question.was_published_recently(), False)

    def test_was_published_recently_with_recent_question(self):
        """
        was_published_recently() 返回 True 当 questions 的 pub_date
        是最近一天的日期。
        """
        time = timezone.now() - datetime.timedelta(hours=23, minutes=59, seconds=59)
        recent_question = Question(pub_date=time)
        self.assertIs(recent_question.was_published_recently(), True)

这样我们就有了三个测试用于确认 ``Question.was_published_recently()``
方法的返回值在发布日期是过去、现在、将来三种情况下都是正确的。

再次提示, ``polls`` 是一个简单的应用，但是将来它可能会变的复杂，不管后续它会增加多少代码，对于那些编写了响应测试的方法我们可以保证他们依然是按照我们的预期在工作的。

测试视图
===========

我们编写的投票应用非常的机械：他会发布任何的问题，哪怕这个问题设置的发布日期是将来的日子。我们应当改进它。把 ``pub_date`` 设置为一个将来的日期，应当意味着这个问题虽然立即被发布，但是在将来他再能被看到。

一个针对视图的测试
-----------------

当我们修复上边提到的 bug 时，我们先编写测试然后再修复 bug。实际上这是一个测试驱动开的小例子，但是它是实际工作中的工作顺序还是有些区别的。

在我们的第一个测试中，我们主要关注代码的内部逻辑。现在，我们想要关注的是它通过浏览器给用户呈现的内容是否是我们襄阳展现的。

在我们动手修复任何东西之前，让我们先来看看我们有什么工具可用。

Django 的测试客户端
----------------------

Django 提供了一个测试类 :class:`~django.test.Client` 可以通过编写代码模拟用户在与视图的交互行为。我们可以在 ``tests.py`` 里使用它或者在 :djadmin:`shell` 里使用也可以。

我们将再次使用 :djadmin:`shell`, 这里我们将会用到一些在 ``tests.py`` 里不会用到的东西。首先是在 :djadmin:`shell` 里设置测试环境:: 

    >>> from django.test.utils import setup_test_environment
    >>> setup_test_environment()

:meth:`~django.test.utils.setup_test_environment` 方法会安装用于渲染的模板，通过他我们可以验证一些在响应中的附加属性例如
``response.context`` that otherwise wouldn't be available. 注意这个方法*不会*设置测试的数据库，所以后续的测试将会运行在工程对应的数据库上，这回导致你获得的输出有些不一样，具体怎么不一样取决于你所创建的问题。你可能会获得一个异常的返回值如果你在 ``settings.py`` 里的 ``TIME_ZONE`` 设置的不正确。 如果你之前忘了设置它，在继续之前最好检查一下。

接下来我们需要引入测试客户端类 (稍后再 ``tests.py`` 里我们将使用 :class:`django.test.TestCase` 类，这个类包含了一个自己的客户端，所以不需要再引入)::

    >>> from django.test import Client
    >>> # create an instance of the client for our use
    >>> client = Client()

做好了这些，我们就能让测试客户端为我们做些工作了::

    >>> # 从 '/'(译注：应用的根路径)获取响应对象
    >>> response = client.get('/')
    Not Found: /
    >>> # 方位这个路径我们希望看到一个404错误；如果你看到的是
    >>> # "Invalid HTTP_HOST header" 错误伴随这一个400的响应，你可能
    >>> # 忘记了调用之前提到的 setup_test_environment() 方法。
    >>> response.status_code
    404
    >>> # 另一方面我们希望访问 '/polls/' 路径是获得一些反馈信息
    >>> # 我们将使用 'reverse()' 方法而不再直接写 URL 路径
    >>> from django.urls import reverse
    >>> response = client.get(reverse('polls:index'))
    >>> response.status_code
    200
    >>> response.content
    b'\n    <ul>\n    \n        <li><a href="/polls/1/">What&#39;s up?</a></li>\n    \n    </ul>\n\n'
    >>> response.context['latest_question_list']
    <QuerySet [<Question: What's up?>]>

改进我们的视图
------------------

投票列表显示了尚未发布的投票事项（即使这些投票的 ``pub_date`` 是将来的日期)。 让我们来修复它。
 
在 :doc:`Tutorial 4 </intro/tutorial04>` 中我们介绍了基于磊的视图，基于:class:`~django.views.generic.list.ListView` 类:

.. snippet::
    :filename: polls/views.py

    class IndexView(generic.ListView):
        template_name = 'polls/index.html'
        context_object_name = 'latest_question_list'

        def get_queryset(self):
            """Return the last five published questions."""
            return Question.objects.order_by('-pub_date')[:5]

我们需要修改 ``get_queryset()`` 方法让它依据 ``timezone.now()`` 方法获取的当前时间来做校验。首先我们需要增加一个引用:

.. snippet::
    :filename: polls/views.py

    from django.utils import timezone

然后我们需要修改 ``get_queryset`` 方法，修改结果如下:

.. snippet::
    :filename: polls/views.py

    def get_queryset(self):
        """
        返回最近的五个法保护的问题（不包括那刺耳被设置为
        在将来的日期发布的问题）。
        """
        return Question.objects.filter(
            pub_date__lte=timezone.now()
        ).order_by('-pub_date')[:5]

``Question.objects.filter(pub_date__lte=timezone.now())`` 返回一个查询结果集其中包含的``Question``都是 ``pub_date`` 小于等于 -及早于或等于 - ``timezone.now`` 的.

测试我们的新视图
--------------------

现在，运行应用程序，通过浏览器来访问它，创建一个具有发布日期的 ``Questions`` ，并确保只有已经发布的问题会被罗列出来，这些或许使你满意了。你肯定不想 *每次你做了一点修改都会影响到它* 让对之前的工作进行修改 - 所以让我们再来创建一个测试，基于:djadmin:`shell` 会话之上。

给 ``polls/tests.py`` 增加如下的代码：

.. snippet::
    :filename: polls/tests.py

    from django.urls import reverse

并且我们将要创建一个便捷的函数，用它来创建问题，并给这个函数创建对应的测试类：

.. snippet::
    :filename: polls/tests.py

    def create_question(question_text, days):
        """
        传入 `question_test` 和 `days`创建一个问题，`days`表示聪现在开始多少天以后发布问题（如
        果是负数则表示过去的天数，正数则表示尚未发布）。
        """
        time = timezone.now() + datetime.timedelta(days=days)
        return Question.objects.create(question_text=question_text, pub_date=time)


    class QuestionIndexViewTests(TestCase):
        def test_no_questions(self):
            """
            如果没有问题存在，，将会显示一个对应的提示信息。
            """
            response = self.client.get(reverse('polls:index'))
            self.assertEqual(response.status_code, 200)
            self.assertContains(response, "No polls are available.")
            self.assertQuerysetEqual(response.context['latest_question_list'], [])

        def test_past_question(self):
            """
            如果是一个发布日期在过去的问题应当显示在页面上。
            """
            create_question(question_text="Past question.", days=-30)
            response = self.client.get(reverse('polls:index'))
            self.assertQuerysetEqual(
                response.context['latest_question_list'],
                ['<Question: Past question.>']
            )

        def test_future_question(self):
            """
            如果是一个发布日期在将来的问题则不应该显示在页面上。
            """
            create_question(question_text="Future question.", days=30)
            response = self.client.get(reverse('polls:index'))
            self.assertContains(response, "No polls are available.")
            self.assertQuerysetEqual(response.context['latest_question_list'], [])

        def test_future_question_and_past_question(self):
            """
            即使同事存在发布时期是过去和将来的问题，也只显示发布日期是过去的问题。
            """
            create_question(question_text="Past question.", days=-30)
            create_question(question_text="Future question.", days=30)
            response = self.client.get(reverse('polls:index'))
            self.assertQuerysetEqual(
                response.context['latest_question_list'],
                ['<Question: Past question.>']
            )

        def test_two_past_questions(self):
            """
            问题的索引页应当可以同时显示多个问题。
            """
            create_question(question_text="Past question 1.", days=-30)
            create_question(question_text="Past question 2.", days=-5)
            response = self.client.get(reverse('polls:index'))
            self.assertQuerysetEqual(
                response.context['latest_question_list'],
                ['<Question: Past question 2.>', '<Question: Past question 1.>']
            )


让我们再仔细看一下其中的某些细节。

首先我们创建了一个便捷的辅助方法，``create_question``, 用它来进行重复的创建问题的事情。
``test_no_questions`` 不会创建任何问题，只是检查这个消息："No polls are available."（没有可用的投票） 并且验证 ``latest_question_list`` 列表是空的。
请注意 :class:`django.test.TestCase` 类提供了一些附加的断言方法。在这些示例中，我们使用
:meth:`~django.test.SimpleTestCase.assertContains()` 方法和
:meth:`~django.test.TransactionTestCase.assertQuerysetEqual()` 方法。

在 ``test_past_question``中，我们创建一个问题然后验证它是否出现在了列表中。

在 ``test_future_question``中，我们创建了一个问题，设置它的发布日期为将来的日子。数据库在每个测试方法执行时都会重置，第一个成都市方法中创建的问题这时在数据库中时不存在的，并且对应的页面上也不会显示任何问题。

这一切。实际上，我们就是使用测试来模拟了一个过程，管理员录入然后用户通过网站浏览，并且检查系统的每个改变是否都被正确分反映出来，结果是否符合我们的预期。

测试 ``详情视图``
--------------------------

目前为止我们做的都还不错；然而，即使将来的问题不会出现在 *索引* 页，用户如果知道或者猜到 URL 地址还是能找到他们。所以我们需要给 ``详情视图`` 加上类似的限制条件：

.. snippet::
    :filename: polls/views.py

    class DetailView(generic.DetailView):
        ...
        def get_queryset(self):
            """
            排除任何尚未发布的问题。
            """
            return Question.objects.filter(pub_date__lte=timezone.now())

当然，我们仍会增加一些测试，用户检查一个已经发布的 ``问题`` 能够显示，一个尚未发布的则不会：

.. snippet::
    :filename: polls/tests.py

    class QuestionDetailViewTests(TestCase):
        def test_future_question(self):
            """
            一个问题的发布日期是在将来，那么他的详细视图将返回一个资源未找到的404错误。
            """
            future_question = create_question(question_text='Future question.', days=5)
            url = reverse('polls:detail', args=(future_question.id,))
            response = self.client.get(url)
            self.assertEqual(response.status_code, 404)

        def test_past_question(self):
            """
            一个已经发布的问题，它的详细视图则会显示问题对应的文本信息。
            """
            past_question = create_question(question_text='Past Question.', days=-5)
            url = reverse('polls:detail', args=(past_question.id,))
            response = self.client.get(url)
            self.assertContains(response, past_question.question_text)

对进一步进行测试的想法
--------------------

我们可以为``结果视图``增加一个类似的 ``get_queryset`` 方法，并且为它创建一个测试类。它与我们刚才创建的非常类似；实际上有很多地方都是重复的。

我们也可以通过多张方式改进我们的应用程序，同时增加对应的测试。例如，即使我们的 ``问题`` 没有 ``选项`` 依然可以发布。所以，我们的视图可以对这种情况进行检查，并将这些``问题``排除在外。 我们的测试将创建一个没有``选项``的``问题``然后测试它是否不能成功发布，同事也会创建一个类似的``问题``它是*有*``选项``的，然后测试*它*可以正常发布。

或许管理员用户登录之后应当被允许看到未发布的``问题``，但是不同用户不行。再次提醒，任何所做的修改都应当有对应的测试，不论你是否是显现测试然后再编码通过测试，或先完成你的代码载编写测试验证它。

在某个时刻你将不得不注意到你的测试，并希望了解你的代码是否因为写了很多的测试而变得困哪，这个问题将引导我们进入下一个问题：

何时测试，测试越多就越好么
============================

越写越多的测试，看起来似乎是失控了。按照这个速率我们用户测试的代码很快就会超过为首先功能所写的代码，并且这些重复的工作也是不优雅的，相对于我们简介优雅的实现功能的那些代码来说。

**没关系**。就让它们膨胀吧。大部分情况，你可以编写一个测试然后就忘了它。在你后续的开发过程中它都会持续的发挥作用。

有的时候测试本身也需要更新。为了应对我们对视图的修改，这样才能只让那些具有``选项``的``问题``发布。在这种情况下，很多我们已经编写好的测试都将失败-*这让我们明白那些测试需要修正*，所以这部分测试帮助我们定位到它们自己。

糟糕的情况下，你继续开发，然后发现你的有些测试变得多余了。这不会成为阻碍；对测试来说荣誉是*好*的。

只要你的测试被合理的安排，它们就不会难易维护。
后的实践准则包含以下几条：Good rules-of-thumb include having:

* 为每个模型或试图分别编写``测试类``
* 为你想测试的每一组测试条件分别编写测试方法
* 测试方法的名字最好能够说明他的功能

更深入的测试
===============

这个教程只是介绍了一些测试的基础。你愿意深入的话还有很多东西可以做，并且可以找到大量的有用的工具，帮助你做很多事情。

例如，我们的测试覆盖了一些模型的内部逻辑以及一些视图上展现的信息，你可以使用一个"內建浏览器"的框架就像 Selenium 来加测 HTML 最终在浏览器中的渲染效果。这些工具让你能够不仅仅测试 Django 代码的行为，并且能够测试其他的部分，例如 JavaScript。测试能够启动一个浏览器，然后像一个真实的用户那样和你做的网站交互是很重要的。 Django 包含了 :class:`~django.test.LiveServerTestCase` 类以便于整合像 Selenium 这类的工具。

如果你做了一个很复杂的应用，你肯定希望能够在每次提交代码时自动运行这些测试，以实现`持续集成`_，所以质量控制的最后一个部分就是自己能够自动的运行测试。

检查你的应用中那些部分没有经过测试的一个好方法是查看代码覆盖率。这也能够辅助定位脆弱代码和多余代码。如果一段代码你不能测试，这通常意味着你应该重构它或者删除它。覆盖率可以识别多余代码。查看
:ref:`topics-testing-code-coverage` 可以获得更多的详情。

:doc:`Testing in Django </topics/testing/index>` 有关于测试的一些更全面、深入的信息。

.. _Selenium: http://seleniumhq.org/
.. _持续集成: https://en.wikipedia.org/wiki/Continuous_integration

What's next?
============

查看 :doc:`Testing in Django </topics/testing/index>` 可湖区关于测试的完整、详细的信息。

当你适应了测试 Django 的视图，可以阅读 :doc:`part 6 of this tutorial</intro/tutorial06>` 来学习静态文件的管理。

~~~~~~~~~~~~~~~~~~~~~~~~