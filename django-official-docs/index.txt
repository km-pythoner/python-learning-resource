====================
Django 文档
====================

.. rubric:: 你所需要知道的关于Django的一切

获得帮助
============

有困难？我们很乐意排忧解难！

* 试试 :doc:`FAQ <faq/index>` -- 里面有很多通用问题的答案。

* 查找特定信息？试试:ref:`genindex`, :ref:`modindex` 或者
  :doc:`detailed table of contents <contents>`.

* 搜索|django-users|的邮件列表档案信息，或者`post a question`_.

*  在`#django IRC channel`_中询问问题，或者搜索`IRC logs`_查看是否有人已经问过相同的问题。

*  在`ticket tracker`_中报告bug。

.. _archives: https://groups.google.com/group/django-users/
.. _post a question: https://groups.google.com/d/forum/django-users
.. _#django IRC channel: irc://irc.freenode.net/django
.. _IRC logs: https://botbot.me/freenode/django/
.. _ticket tracker: https://code.djangoproject.com/

文档是如何组织的？
==================================

Django拥有大量的文档。 一个高度的概括将有助于你了解去哪里寻找特定的内容：

* :doc:`Tutorials </intro/index>` 手把手教你如何一步一步创建Web应用。
  如果你对Django还不熟悉，或者对Web应用开发还不熟悉，就从这开始吧。
  也可以参考下面的":ref:`index-first-steps`" 。

* :doc:`Topic guides </topics/index>`以高水平讨论了Django的关键话题和概念，
  并且提供了有用的背景信息和扩展。

* :doc:`Reference guides </ref/index>`包含了API的技术参考和Django机制的其他方面。
  它们讨论了Django如何工作和如何使用它，但是前提是你需要对关键概念有基本的理解。

* :doc:`How-to guides </howto/index>` 是一些秘诀。它们指导你通过一些步骤解决关键问题和用例。
  它们比手册要高级，但前提是需要了解一些Django如何工作的知识。

.. _index-first-steps:

起初的几步
===========

你是Django新手或是编程新手？从这里开始吧！

* **From scratch:**
  :doc:`Overview <intro/overview>` |
  :doc:`Installation <intro/install>`

* **Tutorial:**
  :doc:`Part 1: Requests and responses <intro/tutorial01>` |
  :doc:`Part 2: Models and the admin site <intro/tutorial02>` |
  :doc:`Part 3: Views and templates <intro/tutorial03>` |
  :doc:`Part 4: Forms and generic views <intro/tutorial04>` |
  :doc:`Part 5: Testing <intro/tutorial05>` |
  :doc:`Part 6: Static files <intro/tutorial06>` |
  :doc:`Part 7: Customizing the admin site <intro/tutorial07>`

* **Advanced Tutorials:**
  :doc:`How to write reusable apps <intro/reusable-apps>` |
  :doc:`Writing your first patch for Django <intro/contributing>`

模型层
===============

Django提供了一个抽象层(the "models") 以构建和操控Web应用程序的数据。
从下面学习更多的知识：

* **模型:**
  :doc:`Introduction to models <topics/db/models>` |
  :doc:`Field types <ref/models/fields>` |
  :doc:`Indexes <ref/models/indexes>` |
  :doc:`Meta options <ref/models/options>` |
  :doc:`Model class <ref/models/class>`

* **查询集:**
  :doc:`Making queries <topics/db/queries>` |
  :doc:`QuerySet method reference <ref/models/querysets>` |
  :doc:`Lookup expressions <ref/models/lookups>`

* **模型实例:**
  :doc:`Instance methods <ref/models/instances>` |
  :doc:`Accessing related objects <ref/models/relations>`

* **迁移:**
  :doc:`Introduction to Migrations<topics/migrations>` |
  :doc:`Operations reference <ref/migration-operations>` |
  :doc:`SchemaEditor <ref/schema-editor>` |
  :doc:`Writing migrations <howto/writing-migrations>`

* **高级话题:**
  :doc:`Managers <topics/db/managers>` |
  :doc:`Raw SQL <topics/db/sql>` |
  :doc:`Transactions <topics/db/transactions>` |
  :doc:`Aggregation <topics/db/aggregation>` |
  :doc:`Search <topics/db/search>` |
  :doc:`Custom fields <howto/custom-model-fields>` |
  :doc:`Multiple databases <topics/db/multi-db>` |
  :doc:`Custom lookups <howto/custom-lookups>` |
  :doc:`Query Expressions <ref/models/expressions>` |
  :doc:`Conditional Expressions <ref/models/conditional-expressions>` |
  :doc:`Database Functions <ref/models/database-functions>`

* **其它:**
  :doc:`Supported databases <ref/databases>` |
  :doc:`Legacy databases <howto/legacy-databases>` |
  :doc:`Providing initial data <howto/initial-data>` |
  :doc:`Optimize database access <topics/db/optimization>` |
  :doc:`PostgreSQL specific features <ref/contrib/postgres/index>`

视图层
==============

Django使用“视图”的概念来封装用户请求和返回响应的逻辑。
从下面的链接中找到有关视图的一切信息：

* **基础:**
  :doc:`URLconfs <topics/http/urls>` |
  :doc:`View functions <topics/http/views>` |
  :doc:`Shortcuts <topics/http/shortcuts>` |
  :doc:`Decorators <topics/http/decorators>`

* **引用:**
  :doc:`Built-in Views <ref/views>` |
  :doc:`Request/response objects <ref/request-response>` |
  :doc:`TemplateResponse objects <ref/template-response>`

* **文件上传:**
  :doc:`Overview <topics/http/file-uploads>` |
  :doc:`File objects <ref/files/file>` |
  :doc:`Storage API <ref/files/storage>` |
  :doc:`Managing files <topics/files>` |
  :doc:`Custom storage <howto/custom-file-storage>`

* **基于类的视图:**
  :doc:`Overview <topics/class-based-views/index>` |
  :doc:`Built-in display views <topics/class-based-views/generic-display>` |
  :doc:`Built-in editing views <topics/class-based-views/generic-editing>` |
  :doc:`Using mixins <topics/class-based-views/mixins>` |
  :doc:`API reference <ref/class-based-views/index>` |
  :doc:`Flattened index<ref/class-based-views/flattened-index>`

* **高级部分:**
  :doc:`Generating CSV <howto/outputting-csv>` |
  :doc:`Generating PDF <howto/outputting-pdf>`

* **中间件:**
  :doc:`Overview <topics/http/middleware>` |
  :doc:`Built-in middleware classes <ref/middleware>`

模板层
==================

模板层提供了对设计者友好的语法用于将信息渲染给用户。
学习设计者如何使用该语法，程序员如何进行功能扩展：

* **基础:**
  :doc:`Overview <topics/templates>`

* **给设计者:**
  :doc:`Language overview <ref/templates/language>` |
  :doc:`Built-in tags and filters <ref/templates/builtins>` |
  :doc:`Humanization <ref/contrib/humanize>`

* **给程序员:**
  :doc:`Template API <ref/templates/api>` |
  :doc:`Custom tags and filters <howto/custom-template-tags>`

表单
=====

Django提供了丰富的框架以创建表单和操控表单数据。

* **基础:**
  :doc:`Overview <topics/forms/index>` |
  :doc:`Form API <ref/forms/api>` |
  :doc:`Built-in fields <ref/forms/fields>` |
  :doc:`Built-in widgets <ref/forms/widgets>`

* **高级:**
  :doc:`Forms for models <topics/forms/modelforms>` |
  :doc:`Integrating media <topics/forms/media>` |
  :doc:`Formsets <topics/forms/formsets>` |
  :doc:`Customizing validation <ref/forms/validation>`

开发流程
=======================

学习各种组件和工具以助于Django 应用程序的开发和测试：

* **设置:**
  :doc:`Overview <topics/settings>` |
  :doc:`Full list of settings <ref/settings>`

* **应用程序:**
  :doc:`Overview <ref/applications>`

* **异常:**
  :doc:`Overview <ref/exceptions>`

* **django-admin 和 manage.py:**
  :doc:`Overview <ref/django-admin>` |
  :doc:`Adding custom commands <howto/custom-management-commands>`

* **测试:**
  :doc:`Introduction <topics/testing/index>` |
  :doc:`Writing and running tests <topics/testing/overview>` |
  :doc:`Included testing tools <topics/testing/tools>` |
  :doc:`Advanced topics <topics/testing/advanced>`

* **部署:**
  :doc:`Overview <howto/deployment/index>` |
  :doc:`WSGI servers <howto/deployment/wsgi/index>` |
  :doc:`Deploying static files <howto/static-files/deployment>` |
  :doc:`Tracking code errors by email <howto/error-reporting>`

admin模块
=========

查找有关自动化admin接口的一切消息，它是Django最流行的特性：

* :doc:`Admin site <ref/contrib/admin/index>`
* :doc:`Admin actions <ref/contrib/admin/actions>`
* :doc:`Admin documentation generator<ref/contrib/admin/admindocs>`

安全
========

安全是Web应用程序开发中最至上的话题，Django提供了多种保护工具和机制：

* :doc:`Security overview <topics/security>`
* :doc:`Disclosed security issues in Django <releases/security>`
* :doc:`Clickjacking protection <ref/clickjacking>`
* :doc:`Cross Site Request Forgery protection <ref/csrf>`
* :doc:`Cryptographic signing <topics/signing>`
* :ref:`Security Middleware <security-middleware>`

国际化和本地化
=====================================

Django提供了健壮的国际化和本地化框架帮助你开发多语言和地区的应用程序：

* :doc:`Overview <topics/i18n/index>` |
  :doc:`Internationalization <topics/i18n/translation>` |
  :ref:`Localization <how-to-create-language-files>` |
  :doc:`Localized Web UI formatting and form input <topics/i18n/formatting>`
* :doc:`Time zones </topics/i18n/timezones>`

执行和优化
============================

有一系列的技术和工具可以帮助你的代码运行时更有效率 - 更快，并且耗费更少的系统资源。

* :doc:`Performance and optimization overview <topics/performance>`

地理学框架
====================

:doc:`GeoDjango <ref/contrib/gis/index>` 趋向于成为一个世界级的地理学Web框架。
它的目标是尽可能的简化构建GIS站点应用和利用空间启用数据的能力。

通用Web应用工具
============================

Django提供了许多Web应用开发中的通用工具：

* **认证:**
  :doc:`Overview <topics/auth/index>` |
  :doc:`Using the authentication system <topics/auth/default>` |
  :doc:`Password management <topics/auth/passwords>` |
  :doc:`Customizing authentication <topics/auth/customizing>` |
  :doc:`API Reference <ref/contrib/auth>`
* :doc:`Caching <topics/cache>`
* :doc:`Logging <topics/logging>`
* :doc:`Sending emails <topics/email>`
* :doc:`Syndication feeds (RSS/Atom) <ref/contrib/syndication>`
* :doc:`Pagination <topics/pagination>`
* :doc:`Messages framework <ref/contrib/messages>`
* :doc:`Serialization <topics/serialization>`
* :doc:`Sessions <topics/http/sessions>`
* :doc:`Sitemaps <ref/contrib/sitemaps>`
* :doc:`Static files management <ref/contrib/staticfiles>`
* :doc:`Data validation <ref/validators>`

其它核心功能
==========================

学习其它关于Django框架的核心功能。

* :doc:`Conditional content processing <topics/conditional-view-processing>`
* :doc:`Content types and generic relations <ref/contrib/contenttypes>`
* :doc:`Flatpages <ref/contrib/flatpages>`
* :doc:`Redirects <ref/contrib/redirects>`
* :doc:`Signals <topics/signals>`
* :doc:`System check framework <topics/checks>`
* :doc:`The sites framework <ref/contrib/sites>`
* :doc:`Unicode in Django <ref/unicode>`

Django开源工程
==============================

学习Django工程本身的开发过程和如何贡献源代码：

* **社区:**
  :doc:`How to get involved <internals/contributing/index>` |
  :doc:`The release process <internals/release-process>` |
  :doc:`Team organization <internals/organization>` |
  :doc:`The Django source code repository <internals/git>` |
  :doc:`Security policies <internals/security>` |
  :doc:`Mailing lists <internals/mailing-lists>`

* **设计哲学:**
  :doc:`Overview <misc/design-philosophies>`

* **文档:**
  :doc:`About this documentation <internals/contributing/writing-documentation>`

* **第三方分布:**
  :doc:`Overview <misc/distributions>`

* **Django历程:**
  :doc:`API stability <misc/api-stability>` |
  :doc:`Release notes and upgrading instructions <releases/index>` |
  :doc:`Deprecation Timeline <internals/deprecation>`
